/**
 * AUTO-GENERATED APPWRITE CONFIGURATION
 * 
 * Generated from schema/schema.ts
 * Do not edit this file directly - run 'npm run generate:appwrite' instead
 */

import { Client, Databases } from 'node-appwrite';

// Schema version for migration compatibility
export const SCHEMA_VERSION = '1.0.0';

// Initialize Appwrite client
export const client = new Client()
  .setEndpoint(process.env.APPWRITE_ENDPOINT || 'https://nyc.cloud.appwrite.io/v1')
  .setProject(process.env.APPWRITE_PROJECT_ID || 'college-football-fantasy-app')
  .setKey(process.env.APPWRITE_API_KEY);

export const databases = new Databases(client);
export const DATABASE_ID = process.env.APPWRITE_DATABASE_ID || 'college-football-fantasy';

// Collection IDs derived from schema
export const COLLECTIONS = {
  FANTASY_TEAMS: 'fantasy_teams',
  LEAGUES: 'leagues',
  COLLEGE_PLAYERS: 'college_players',
  GAMES: 'games',
  RANKINGS: 'rankings',
  DRAFT_EVENTS: 'draft_events',
  DRAFT_STATES: 'draft_states',
  ROSTER_SLOTS: 'roster_slots',
  SCHOOLS: 'schools',
  CLIENTS: 'clients',
  LEAGUE_MEMBERSHIPS: 'league_memberships',
  LINEUPS: 'lineups',
  MATCHUPS: 'matchups',
  PLAYER_STATS: 'player_stats',
  PROJECTIONS: 'projections',
  MODEL_RUNS: 'model_runs',
  TRANSACTIONS: 'transactions',
  AUCTIONS: 'auctions',
  BIDS: 'bids',
  ACTIVITY_LOG: 'activity_log',
  INVITES: 'invites',
  MESHY_JOBS: 'meshy_jobs',
  MODEL_VERSIONS: 'model_versions',
  MIGRATIONS: 'migrations',
  DRAFTS: 'drafts',
  DRAFT_PICKS: 'draft_picks',
} as const;

// Collection metadata for validation and tooling
export const COLLECTION_METADATA = {
  fantasy_teams: {
    id: 'fantasy_teams',
    name: 'Fantasy Teams',
    description: '',
    attributeCount: 16,
    indexCount: 3,
    requiredAttributes: ['leagueId', 'teamName'],
  },
  leagues: {
    id: 'leagues',
    name: 'Leagues',
    description: '',
    attributeCount: 20,
    indexCount: 3,
    requiredAttributes: ['leagueName', 'season'],
  },
  college_players: {
    id: 'college_players',
    name: 'College Players',
    description: '',
    attributeCount: 16,
    indexCount: 7,
    requiredAttributes: ['name', 'position', 'team', 'conference', 'schoolId'],
  },
  games: {
    id: 'games',
    name: 'Games',
    description: '',
    attributeCount: 16,
    indexCount: 5,
    requiredAttributes: ['week', 'season', 'seasonType', 'date', 'kickoffAt', 'startDate', 'homeTeam', 'awayTeam', 'homeSchoolId', 'awaySchoolId', 'eligibleGame', 'completed'],
  },
  rankings: {
    id: 'rankings',
    name: 'AP Rankings',
    description: '',
    attributeCount: 9,
    indexCount: 7,
    requiredAttributes: ['week', 'season', 'pollType', 'team', 'schoolId', 'rank', 'source'],
  },
  draft_events: {
    id: 'draft_events',
    name: 'Draft Events',
    description: '',
    attributeCount: 8,
    indexCount: 2,
    requiredAttributes: ['draftId', 'type'],
  },
  draft_states: {
    id: 'draft_states',
    name: 'Draft States',
    description: '',
    attributeCount: 6,
    indexCount: 1,
    requiredAttributes: ['draftId', 'onClockTeamId', 'round', 'pickIndex'],
  },
  roster_slots: {
    id: 'roster_slots',
    name: 'Roster Slots',
    description: '',
    attributeCount: 5,
    indexCount: 2,
    requiredAttributes: ['fantasyTeamId', 'playerId', 'position'],
  },
  schools: {
    id: 'schools',
    name: 'Schools',
    description: '',
    attributeCount: 8,
    indexCount: 2,
    requiredAttributes: ['name', 'conference'],
  },
  clients: {
    id: 'clients',
    name: 'clients',
    description: '',
    attributeCount: 6,
    indexCount: 2,
    requiredAttributes: ['authUserId', 'createdAt'],
  },
  league_memberships: {
    id: 'league_memberships',
    name: 'league_memberships',
    description: '',
    attributeCount: 7,
    indexCount: 3,
    requiredAttributes: ['leagueId', 'authUserId', 'role', 'status'],
  },
  lineups: {
    id: 'lineups',
    name: 'Lineups',
    description: '',
    attributeCount: 8,
    indexCount: 1,
    requiredAttributes: ['rosterId', 'fantasyTeamId', 'week', 'season'],
  },
  matchups: {
    id: 'matchups',
    name: 'Matchups',
    description: '',
    attributeCount: 8,
    indexCount: 1,
    requiredAttributes: ['leagueId', 'season', 'week', 'homeTeamId', 'awayTeamId'],
  },
  player_stats: {
    id: 'player_stats',
    name: 'Player Stats',
    description: '',
    attributeCount: 9,
    indexCount: 5,
    requiredAttributes: ['playerId', 'gameId', 'week', 'season', 'stats'],
  },
  projections: {
    id: 'projections',
    name: 'projections',
    description: '',
    attributeCount: 21,
    indexCount: 1,
    requiredAttributes: ['playerId', 'season', 'period', 'version'],
  },
  model_runs: {
    id: 'model_runs',
    name: 'model_runs',
    description: '',
    attributeCount: 12,
    indexCount: 1,
    requiredAttributes: ['season', 'scope', 'status'],
  },
  transactions: {
    id: 'transactions',
    name: 'Transactions',
    description: '',
    attributeCount: 7,
    indexCount: 3,
    requiredAttributes: ['leagueId', 'fantasyTeamId', 'type'],
  },
  auctions: {
    id: 'auctions',
    name: 'Auctions',
    description: '',
    attributeCount: 6,
    indexCount: 3,
    requiredAttributes: ['leagueId', 'draftId', 'playerId', 'status'],
  },
  bids: {
    id: 'bids',
    name: 'Bids',
    description: '',
    attributeCount: 7,
    indexCount: 3,
    requiredAttributes: ['auctionId', 'playerId', 'teamId', 'amount', 'timestamp', 'fantasyTeamId'],
  },
  activity_log: {
    id: 'activity_log',
    name: 'activity_log',
    description: '',
    attributeCount: 20,
    indexCount: 8,
    requiredAttributes: ['action', 'timestamp', 'type', 'description', 'createdAt', 'ts'],
  },
  invites: {
    id: 'invites',
    name: 'invites',
    description: '',
    attributeCount: 9,
    indexCount: 2,
    requiredAttributes: ['leagueId', 'inviteCode', 'createdAt'],
  },
  meshy_jobs: {
    id: 'meshy_jobs',
    name: 'meshy_jobs',
    description: '',
    attributeCount: 11,
    indexCount: 0,
    requiredAttributes: ['createdAt'],
  },
  model_versions: {
    id: 'model_versions',
    name: 'Model Versions',
    description: '',
    attributeCount: 11,
    indexCount: 4,
    requiredAttributes: ['versionId', 'modelPath', 'version', 'createdAt', 'createdBy', 'description'],
  },
  migrations: {
    id: 'migrations',
    name: 'migrations',
    description: '',
    attributeCount: 3,
    indexCount: 1,
    requiredAttributes: ['migrationId', 'name', 'appliedAt'],
  },
  drafts: {
    id: 'drafts',
    name: 'drafts',
    description: '',
    attributeCount: 22,
    indexCount: 0,
    requiredAttributes: [],
  },
  draft_picks: {
    id: 'draft_picks',
    name: 'draft_picks',
    description: '',
    attributeCount: 11,
    indexCount: 1,
    requiredAttributes: ['leagueId', 'userId', 'playerId', 'round', 'pick'],
  },
};

/**
 * Get collection ID with type safety
 */
export function getCollectionId(name: keyof typeof COLLECTIONS): string {
  return COLLECTIONS[name];
}

/**
 * Validate that all required collections exist
 */
export async function validateCollections(): Promise<{ valid: boolean; missing: string[] }> {
  try {
    const response = await databases.listCollections(DATABASE_ID);
    const existingIds = new Set(response.collections.map(c => c.$id));
    
    const requiredCollections = Object.values(COLLECTIONS);
    const missing = requiredCollections.filter(id => !existingIds.has(id));
    
    return { valid: missing.length === 0, missing };
  } catch (error) {
    console.error('Failed to validate collections:', error);
    return { valid: false, missing: Object.values(COLLECTIONS) };
  }
}

/**
 * Get collection metadata
 */
export function getCollectionMetadata(collectionId: string) {
  return COLLECTION_METADATA[collectionId as keyof typeof COLLECTION_METADATA];
}
