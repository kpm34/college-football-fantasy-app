#!/usr/bin/env tsx
import fs from 'node:fs'
import path from 'node:path'

const OUTPUT_DIR = path.join(process.cwd(), 'docs/diagrams/functional')
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'create-account.md')

function generateCreateAccountDiagrams() {
  const content: string[] = []
  
  // Header
  content.push('# Create Account Flow')
  content.push('')
  content.push('## Overview')
  content.push('User account creation flow using Appwrite Auth with Google OAuth and email/password options.')
  content.push('')
  
  // Related files
  content.push('## Related Files')
  content.push('- `/app/api/auth/callback/route.ts` - OAuth callback handler')
  content.push('- `/app/(auth)/login/page.tsx` - Login/signup UI')
  content.push('- `/lib/appwrite-server.ts` - Server-side Appwrite client')
  content.push('- `/lib/db/clients.ts` - Client DAL')
  content.push('')
  
  // Flowchart
  content.push('## User Flow')
  content.push('```mermaid')
  content.push('flowchart TB')
  content.push('  classDef user fill:#fef3c7,stroke:#f59e0b,stroke-width:2,color:#92400e')
  content.push('  classDef auth fill:#dbeafe,stroke:#3b82f6,stroke-width:2,color:#1e3a8a')
  content.push('  classDef db fill:#d1fae5,stroke:#10b981,stroke-width:2,color:#064e3b')
  content.push('  classDef api fill:#fce7f3,stroke:#ec4899,stroke-width:2,color:#831843')
  content.push('  ')
  content.push('  Start([User visits app]):::user')
  content.push('  Login[Login Page]:::user')
  content.push('  Choice{Auth Method}:::user')
  content.push('  ')
  content.push('  GoogleAuth[Google OAuth]:::auth')
  content.push('  EmailAuth[Email/Password]:::auth')
  content.push('  AppwriteAuth[Appwrite Auth Service]:::auth')
  content.push('  ')
  content.push('  Callback[OAuth Callback]:::api')
  content.push('  CreateSession[Create Session]:::auth')
  content.push('  ')
  content.push('  CheckClient{Client Exists?}:::db')
  content.push('  CreateClient[Create Client Record]:::db')
  content.push('  UpdateClient[Update Client]:::db')
  content.push('  ')
  content.push('  ActivityLog[Log Activity]:::db')
  content.push('  Dashboard[Redirect to Dashboard]:::user')
  content.push('  ')
  content.push('  Start --> Login')
  content.push('  Login --> Choice')
  content.push('  Choice -->|Google| GoogleAuth')
  content.push('  Choice -->|Email| EmailAuth')
  content.push('  ')
  content.push('  GoogleAuth --> AppwriteAuth')
  content.push('  EmailAuth --> AppwriteAuth')
  content.push('  AppwriteAuth --> Callback')
  content.push('  Callback --> CreateSession')
  content.push('  ')
  content.push('  CreateSession --> CheckClient')
  content.push('  CheckClient -->|No| CreateClient')
  content.push('  CheckClient -->|Yes| UpdateClient')
  content.push('  ')
  content.push('  CreateClient --> ActivityLog')
  content.push('  UpdateClient --> ActivityLog')
  content.push('  ActivityLog --> Dashboard')
  content.push('```')
  content.push('')
  
  // Sequence Diagram
  content.push('## Sequence Diagram')
  content.push('```mermaid')
  content.push('sequenceDiagram')
  content.push('  participant U as User')
  content.push('  participant UI as Login Page')
  content.push('  participant Auth as Appwrite Auth')
  content.push('  participant API as API Route')
  content.push('  participant DAL as Data Layer')
  content.push('  participant DB as Database')
  content.push('  ')
  content.push('  U->>UI: Visit /login')
  content.push('  UI->>U: Show auth options')
  content.push('  ')
  content.push('  alt Google OAuth')
  content.push('    U->>UI: Click Google')
  content.push('    UI->>Auth: Initiate OAuth')
  content.push('    Auth->>U: Redirect to Google')
  content.push('    U->>Auth: Authorize')
  content.push('    Auth->>API: Callback with code')
  content.push('  else Email/Password')
  content.push('    U->>UI: Enter credentials')
  content.push('    UI->>Auth: Create account')
  content.push('    Auth->>API: Session created')
  content.push('  end')
  content.push('  ')
  content.push('  API->>DAL: Get/Create client')
  content.push('  DAL->>DB: Query clients')
  content.push('  ')
  content.push('  alt New User')
  content.push('    DB-->>DAL: Not found')
  content.push('    DAL->>DB: INSERT clients')
  content.push('    DAL->>DB: INSERT activity_log')
  content.push('  else Existing User')
  content.push('    DB-->>DAL: Client found')
  content.push('    DAL->>DB: UPDATE last_login')
  content.push('    DAL->>DB: INSERT activity_log')
  content.push('  end')
  content.push('  ')
  content.push('  DAL-->>API: Client record')
  content.push('  API-->>U: Redirect to dashboard')
  content.push('```')
  content.push('')
  
  // Data Interaction Table
  content.push('## Data Interactions')
  content.push('')
  content.push('| Collection | Operation | Attributes Set | Notes |')
  content.push('|------------|-----------|---------------|-------|')
  content.push('| `clients` | READ | `auth_user_id` | Check if client exists |')
  content.push('| `clients` | CREATE | `auth_user_id`, `display_name`, `email`, `avatar_url`, `created_at` | New user registration |')
  content.push('| `clients` | UPDATE | `last_login` | Existing user login |')
  content.push('| `activity_log` | CREATE | `action`, `client_id`, `metadata`, `created_at` | Track signup/login events |')
  content.push('| `leagues` | READ | - | Load user leagues after login |')
  content.push('| `league_memberships` | READ | `client_id` | Find user memberships |')
  content.push('')
  
  // Validation & Error States
  content.push('## Validation & Error States')
  content.push('')
  content.push('### Zod Schemas')
  content.push('- `clientsSchema` - Validates client data structure')
  content.push('- Email validation in auth forms')
  content.push('')
  content.push('### Error Handling')
  content.push('- OAuth failure → Show error, redirect to login')
  content.push('- Email already exists → Prompt to login instead')
  content.push('- Weak password → Show requirements')
  content.push('- Network error → Retry with backoff')
  content.push('- Session expired → Re-authenticate')
  content.push('')
  
  return content.join('\n')
}

// Ensure directory exists
fs.mkdirSync(OUTPUT_DIR, { recursive: true })

// Generate and write content
const content = generateCreateAccountDiagrams()
fs.writeFileSync(OUTPUT_FILE, content)

console.log(`✅ Generated: ${OUTPUT_FILE}`)
