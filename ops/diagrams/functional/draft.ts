#!/usr/bin/env tsx
import fs from 'node:fs'
import path from 'node:path'

const OUTPUT_DIR = path.join(process.cwd(), 'docs/diagrams/functional')
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'draft.md')

function generateDraftDiagrams() {
  const content: string[] = []
  
  // Header
  content.push('# Draft Flow (Snake & Auction)')
  content.push('')
  content.push('## Overview')
  content.push('Comprehensive draft system supporting both snake drafts and auction drafts with real-time updates.')
  content.push('')
  
  // Related files
  content.push('## Related Files')
  content.push('- `/app/api/drafts/[id]/start/route.ts` - Start draft')
  content.push('- `/app/api/drafts/[id]/pick/route.ts` - Make pick (snake)')
  content.push('- `/app/api/drafts/[id]/bid/route.ts` - Place bid (auction)')
  content.push('- `/app/api/drafts/[id]/state/route.ts` - Get/update draft state')
  content.push('- `/app/draft/[leagueId]/page.tsx` - Draft room UI')
  content.push('- `/lib/draft/engine.ts` - Core draft logic')
  content.push('- `/lib/db/drafts.ts` - Draft DAL')
  content.push('- `/lib/realtime/draft.ts` - WebSocket handlers')
  content.push('')
  
  // Main Flowchart
  content.push('## Draft Flow')
  content.push('```mermaid')
  content.push('flowchart TB')
  content.push('  classDef draft fill:#fef3c7,stroke:#d97706,stroke-width:2,color:#451a03')
  content.push('  classDef snake fill:#dbeafe,stroke:#3b82f6,stroke-width:2,color:#1e3a8a')
  content.push('  classDef auction fill:#dcfce7,stroke:#16a34a,stroke-width:2,color:#14532d')
  content.push('  classDef state fill:#fce7f3,stroke:#ec4899,stroke-width:2,color:#831843')
  content.push('  classDef error fill:#fee2e2,stroke:#ef4444,stroke-width:2,color:#7f1d1d')
  content.push('  ')
  content.push('  Start([Commissioner Starts Draft]):::draft')
  content.push('  CheckType{Draft Type?}:::draft')
  content.push('  ')
  content.push('  %% Snake Draft Path')
  content.push('  subgraph Snake[Snake Draft]')
  content.push('    InitOrder[Initialize Draft Order]:::snake')
  content.push('    NextPick[Determine Next Pick]:::snake')
  content.push('    OnClock[Team On Clock]:::snake')
  content.push('    Timer[Start Timer]:::snake')
  content.push('    ')
  content.push('    PickChoice{Action?}:::snake')
  content.push('    MakePick[Make Pick]:::snake')
  content.push('    AutoPick[Auto Pick]:::snake')
  content.push('    ')
  content.push('    ValidatePick{Valid?}:::snake')
  content.push('    RecordPick[Record Pick]:::snake')
  content.push('    UpdateRoster[Update Roster]:::snake')
  content.push('  end')
  content.push('  ')
  content.push('  %% Auction Draft Path')
  content.push('  subgraph Auction[Auction Draft]')
  content.push('    InitBudgets[Initialize Budgets]:::auction')
  content.push('    NextLot[Next Player Lot]:::auction')
  content.push('    OpenBidding[Open Bidding]:::auction')
  content.push('    BidTimer[Bid Timer]:::auction')
  content.push('    ')
  content.push('    BidChoice{Action?}:::auction')
  content.push('    PlaceBid[Place Bid]:::auction')
  content.push('    PassLot[Pass on Lot]:::auction')
  content.push('    ')
  content.push('    ValidateBid{Valid?}:::auction')
  content.push('    RecordBid[Record Bid]:::auction')
  content.push('    CloseLot[Close Lot]:::auction')
  content.push('    UpdateBudget[Update Budget]:::auction')
  content.push('  end')
  content.push('  ')
  content.push('  %% Common State Management')
  content.push('  UpdateState[Update Draft State]:::state')
  content.push('  Broadcast[Broadcast to All]:::state')
  content.push('  CheckComplete{Draft Complete?}:::state')
  content.push('  ')
  content.push('  Complete[Draft Complete]:::draft')
  content.push('  FinalizeRosters[Finalize Rosters]:::draft')
  content.push('  ')
  content.push('  %% Error Handling')
  content.push('  NetworkError[Network Retry]:::error')
  content.push('  TimeoutError[Handle Timeout]:::error')
  content.push('  PermissionError[Permission Denied]:::error')
  content.push('  ')
  content.push('  %% Flow connections')
  content.push('  Start --> CheckType')
  content.push('  ')
  content.push('  CheckType -->|Snake| InitOrder')
  content.push('  InitOrder --> NextPick')
  content.push('  NextPick --> OnClock')
  content.push('  OnClock --> Timer')
  content.push('  Timer --> PickChoice')
  content.push('  PickChoice -->|Manual| MakePick')
  content.push('  PickChoice -->|Timeout| AutoPick')
  content.push('  MakePick --> ValidatePick')
  content.push('  AutoPick --> ValidatePick')
  content.push('  ValidatePick -->|Yes| RecordPick')
  content.push('  ValidatePick -->|No| PickChoice')
  content.push('  RecordPick --> UpdateRoster')
  content.push('  UpdateRoster --> UpdateState')
  content.push('  ')
  content.push('  CheckType -->|Auction| InitBudgets')
  content.push('  InitBudgets --> NextLot')
  content.push('  NextLot --> OpenBidding')
  content.push('  OpenBidding --> BidTimer')
  content.push('  BidTimer --> BidChoice')
  content.push('  BidChoice -->|Bid| PlaceBid')
  content.push('  BidChoice -->|Pass| PassLot')
  content.push('  PlaceBid --> ValidateBid')
  content.push('  ValidateBid -->|Yes| RecordBid')
  content.push('  ValidateBid -->|No| BidChoice')
  content.push('  RecordBid --> CloseLot')
  content.push('  CloseLot --> UpdateBudget')
  content.push('  UpdateBudget --> UpdateState')
  content.push('  PassLot --> UpdateState')
  content.push('  ')
  content.push('  UpdateState --> Broadcast')
  content.push('  Broadcast --> CheckComplete')
  content.push('  CheckComplete -->|No| NextPick')
  content.push('  CheckComplete -->|No| NextLot')
  content.push('  CheckComplete -->|Yes| Complete')
  content.push('  Complete --> FinalizeRosters')
  content.push('  ')
  content.push('  %% Error paths')
  content.push('  Broadcast -.->|Network Fail| NetworkError')
  content.push('  Timer -.->|Timeout| TimeoutError')
  content.push('  ValidatePick -.->|No Permission| PermissionError')
  content.push('  ValidateBid -.->|No Permission| PermissionError')
  content.push('  NetworkError -.-> Broadcast')
  content.push('  TimeoutError -.-> AutoPick')
  content.push('```')
  content.push('')
  
  // Sequence Diagram
  content.push('## Sequence Diagram')
  content.push('```mermaid')
  content.push('sequenceDiagram')
  content.push('  participant U as User/Commissioner')
  content.push('  participant UI as Draft Room')
  content.push('  participant WS as WebSocket')
  content.push('  participant API as API Routes')
  content.push('  participant Engine as Draft Engine')
  content.push('  participant DAL as Data Layer')
  content.push('  participant DB as Appwrite')
  content.push('  participant RT as Realtime')
  content.push('  ')
  content.push('  %% Start Draft')
  content.push('  U->>UI: Start Draft')
  content.push('  UI->>API: POST /api/drafts/[id]/start')
  content.push('  API->>Engine: Initialize draft')
  content.push('  Engine->>DAL: Create draft record')
  content.push('  DAL->>DB: INSERT drafts')
  content.push('  DAL->>DB: INSERT draft_states')
  content.push('  ')
  content.push('  %% WebSocket Connection')
  content.push('  UI->>WS: Connect to draft room')
  content.push('  WS->>RT: Subscribe to draft channel')
  content.push('  ')
  content.push('  %% Snake Draft Pick')
  content.push('  alt Snake Draft')
  content.push('    loop Each Pick')
  content.push('      Engine->>DAL: Get next team')
  content.push('      DAL->>DB: SELECT draft_states')
  content.push('      Engine->>RT: Broadcast on-clock')
  content.push('      RT-->>UI: Update UI (all users)')
  content.push('      ')
  content.push('      Note over UI: Timer starts (60s)')
  content.push('      ')
  content.push('      alt Manual Pick')
  content.push('        U->>UI: Select player')
  content.push('        UI->>API: POST /api/drafts/[id]/pick')
  content.push('        API->>Engine: Validate pick')
  content.push('      else Auto Pick (timeout)')
  content.push('        Note over Engine: Timer expires')
  content.push('        Engine->>Engine: Select BPA')
  content.push('      end')
  content.push('      ')
  content.push('      Engine->>DAL: Record pick')
  content.push('      DAL->>DB: INSERT draft_events')
  content.push('      DAL->>DB: INSERT roster_slots')
  content.push('      DAL->>DB: UPDATE draft_states')
  content.push('      ')
  content.push('      Engine->>RT: Broadcast pick')
  content.push('      RT-->>UI: Update all clients')
  content.push('    end')
  content.push('  ')
  content.push('  %% Auction Draft Bid')
  content.push('  else Auction Draft')
  content.push('    DAL->>DB: INSERT auctions (lots)')
  content.push('    ')
  content.push('    loop Each Lot')
  content.push('      Engine->>RT: Open bidding')
  content.push('      RT-->>UI: Show lot')
  content.push('      ')
  content.push('      Note over UI: Bid timer (30s)')
  content.push('      ')
  content.push('      par Bidding')
  content.push('        U->>UI: Place bid')
  content.push('        UI->>API: POST /api/drafts/[id]/bid')
  content.push('        API->>Engine: Validate bid')
  content.push('        Engine->>DAL: Record bid')
  content.push('        DAL->>DB: INSERT bids')
  content.push('        DAL->>DB: UPDATE auctions')
  content.push('      and Broadcast')
  content.push('        Engine->>RT: Broadcast bid')
  content.push('        RT-->>UI: Update all clients')
  content.push('      end')
  content.push('      ')
  content.push('      Note over Engine: Timer expires')
  content.push('      Engine->>DAL: Close lot')
  content.push('      DAL->>DB: UPDATE auctions (winner)')
  content.push('      DAL->>DB: INSERT roster_slots')
  content.push('      DAL->>DB: UPDATE fantasy_teams (budget)')
  content.push('    end')
  content.push('  end')
  content.push('  ')
  content.push('  %% Complete Draft')
  content.push('  Engine->>DAL: Finalize draft')
  content.push('  DAL->>DB: UPDATE drafts (status=completed)')
  content.push('  DAL->>DB: UPDATE leagues (status=active)')
  content.push('  DAL->>DB: INSERT transactions (draft picks)')
  content.push('  Engine->>RT: Broadcast complete')
  content.push('  RT-->>UI: Draft complete')
  content.push('```')
  content.push('')
  
  // Data Interaction Table
  content.push('## Data Interactions')
  content.push('')
  content.push('| Collection | Read/Write | When | Attributes | Notes |')
  content.push('|------------|------------|------|------------|-------|')
  content.push('| **Draft Setup** | | | | |')
  content.push('| `drafts` | CREATE | Start | `league_id`, `type`, `status`, `start_time` | Initialize draft |')
  content.push('| `drafts` | READ | Throughout | All | Check draft config |')
  content.push('| `drafts` | UPDATE | Complete | `status`, `end_time` | Mark as completed |')
  content.push('| `draft_states` | CREATE | Start | `draft_id`, `round=1`, `pick=1`, `on_clock_team_id` | Initial state |')
  content.push('| `draft_states` | READ | Each turn | `on_clock_team_id`, `deadline_at` | Get current pick |')
  content.push('| `draft_states` | UPDATE | Each pick | `round`, `pick`, `on_clock_team_id`, `deadline_at` | Advance draft |')
  content.push('| **Snake Draft** | | | | |')
  content.push('| `draft_events` | CREATE | Each pick | `draft_id`, `type=pick`, `round`, `overall`, `fantasy_team_id`, `player_id`, `ts` | Record pick |')
  content.push('| `draft_events` | READ | UI update | All | Show pick history |')
  content.push('| `roster_slots` | CREATE | Each pick | `fantasy_team_id`, `player_id`, `position`, `acquisition_type=draft` | Add to roster |')
  content.push('| `college_players` | READ | Pick validation | `id`, `position`, `eligible` | Validate player |')
  content.push('| `college_players` | UPDATE | After pick | `drafted=true` | Mark as drafted |')
  content.push('| **Auction Draft** | | | | |')
  content.push('| `auctions` | CREATE | Each lot | `league_id`, `player_id`, `status=open`, `current_bid=0` | Open lot |')
  content.push('| `auctions` | READ | Bidding | `current_bid`, `current_bidder_id`, `ends_at` | Show current bid |')
  content.push('| `auctions` | UPDATE | Each bid | `current_bid`, `current_bidder_id` | Update high bid |')
  content.push('| `auctions` | UPDATE | Timer end | `status=closed`, `winner_id`, `final_price` | Close lot |')
  content.push('| `bids` | CREATE | Each bid | `auction_id`, `fantasy_team_id`, `amount`, `timestamp` | Record bid |')
  content.push('| `bids` | READ | History | All | Show bid history |')
  content.push('| `fantasy_teams` | READ | Validation | `auction_budget_remaining` | Check budget |')
  content.push('| `fantasy_teams` | UPDATE | Won lot | `auction_budget_remaining` | Deduct cost |')
  content.push('| **Common** | | | | |')
  content.push('| `transactions` | CREATE | Each action | `type=draft/auction`, `fantasy_team_id`, `player_id` | Audit trail |')
  content.push('| `activity_log` | CREATE | Key events | `action`, `league_id`, `client_id`, `metadata` | Track activity |')
  content.push('| `league_memberships` | READ | Validation | `league_id`, `client_id`, `role` | Check permissions |')
  content.push('')
  
  // Failure Points
  content.push('## Points of Failure & Mitigation')
  content.push('')
  content.push('### Network Issues')
  content.push('- **Problem**: WebSocket disconnection during draft')
  content.push('- **Mitigation**: ')
  content.push('  - Auto-reconnect with exponential backoff')
  content.push('  - Persist draft state in DB every action')
  content.push('  - Allow rejoin with state recovery')
  content.push('  - Queue actions during disconnect')
  content.push('')
  content.push('### Timeouts')
  content.push('- **Problem**: User doesn\'t pick in time')
  content.push('- **Mitigation**:')
  content.push('  - Auto-pick best available player')
  content.push('  - Pre-draft rankings per team')
  content.push('  - Commissioner can pause/extend timer')
  content.push('  - Warning notifications at 10s remaining')
  content.push('')
  content.push('### Permission Errors')
  content.push('- **Problem**: Wrong user trying to pick')
  content.push('- **Mitigation**:')
  content.push('  - Server-side validation of on_clock_team_id')
  content.push('  - Role-based access (commissioner override)')
  content.push('  - Signed WebSocket messages')
  content.push('  - Rate limiting per user')
  content.push('')
  content.push('### Data Conflicts')
  content.push('- **Problem**: Simultaneous picks/bids')
  content.push('- **Mitigation**:')
  content.push('  - Database transactions')
  content.push('  - Optimistic locking on draft_states')
  content.push('  - Unique constraints on roster_slots')
  content.push('  - Bid validation against current state')
  content.push('')
  content.push('### Recovery Procedures')
  content.push('```typescript')
  content.push('// Automatic retry with backoff')
  content.push('const retry = async (fn, retries = 3, delay = 1000) => {')
  content.push('  try {')
  content.push('    return await fn()')
  content.push('  } catch (error) {')
  content.push('    if (retries === 0) throw error')
  content.push('    await new Promise(r => setTimeout(r, delay))')
  content.push('    return retry(fn, retries - 1, delay * 2)')
  content.push('  }')
  content.push('}')
  content.push('')
  content.push('// State recovery on reconnect')
  content.push('const recoverDraftState = async (draftId) => {')
  content.push('  const state = await getDraftState(draftId)')
  content.push('  const events = await getDraftEvents(draftId)')
  content.push('  return reconstructState(state, events)')
  content.push('}')
  content.push('```')
  content.push('')
  
  return content.join('\n')
}

// Ensure directory exists
fs.mkdirSync(OUTPUT_DIR, { recursive: true })

// Generate and write content
const content = generateDraftDiagrams()
fs.writeFileSync(OUTPUT_FILE, content)

console.log(`✅ Generated: ${OUTPUT_FILE}`)
