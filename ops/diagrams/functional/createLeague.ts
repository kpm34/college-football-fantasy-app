#!/usr/bin/env tsx
import fs from 'node:fs'
import path from 'node:path'

const OUTPUT_DIR = path.join(process.cwd(), 'docs/diagrams/functional')
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'create-league.md')

function generateCreateLeagueDiagrams() {
  const content: string[] = []
  
  // Header
  content.push('# Create League Flow')
  content.push('')
  content.push('## Overview')
  content.push('League creation flow with configuration options and automatic commissioner assignment.')
  content.push('')
  
  // Related files
  content.push('## Related Files')
  content.push('- `/app/api/leagues/create/route.ts` - League creation API')
  content.push('- `/app/(dashboard)/league/create/page.tsx` - Create league UI')
  content.push('- `/lib/db/leagues.ts` - League DAL')
  content.push('- `/lib/db/league_memberships.ts` - Membership DAL')
  content.push('- `/schema/zod/leagues.ts` - League validation schema')
  content.push('')
  
  // Flowchart
  content.push('## User Flow')
  content.push('```mermaid')
  content.push('flowchart TB')
  content.push('  classDef user fill:#fef3c7,stroke:#f59e0b,stroke-width:2,color:#92400e')
  content.push('  classDef form fill:#e0e7ff,stroke:#6366f1,stroke-width:2,color:#312e81')
  content.push('  classDef api fill:#fce7f3,stroke:#ec4899,stroke-width:2,color:#831843')
  content.push('  classDef db fill:#d1fae5,stroke:#10b981,stroke-width:2,color:#064e3b')
  content.push('  classDef validate fill:#fee2e2,stroke:#ef4444,stroke-width:2,color:#7f1d1d')
  content.push('  ')
  content.push('  Start([User clicks Create League]):::user')
  content.push('  Form[League Settings Form]:::form')
  content.push('  ')
  content.push('  subgraph Settings')
  content.push('    Name[League Name]:::form')
  content.push('    Type[Game Mode: Power4/Conference]:::form')
  content.push('    Conf[Select Conference]:::form')
  content.push('    Draft[Draft Type: Snake/Auction]:::form')
  content.push('    Teams[Max Teams: 8-12]:::form')
  content.push('    Privacy[Public/Private]:::form')
  content.push('    Password[Optional Password]:::form')
  content.push('  end')
  content.push('  ')
  content.push('  Validate[Validate Input]:::validate')
  content.push('  API[POST /api/leagues/create]:::api')
  content.push('  ')
  content.push('  CreateLeague[Create League Record]:::db')
  content.push('  CreateMembership[Add Commissioner]:::db')
  content.push('  CreateTeam[Create Fantasy Team]:::db')
  content.push('  ActivityLog[Log Creation]:::db')
  content.push('  ')
  content.push('  Success[League Dashboard]:::user')
  content.push('  Error[Show Error]:::validate')
  content.push('  ')
  content.push('  Start --> Form')
  content.push('  Form --> Settings')
  content.push('  Settings --> Validate')
  content.push('  Validate -->|Valid| API')
  content.push('  Validate -->|Invalid| Error')
  content.push('  Error --> Form')
  content.push('  ')
  content.push('  API --> CreateLeague')
  content.push('  CreateLeague --> CreateMembership')
  content.push('  CreateMembership --> CreateTeam')
  content.push('  CreateTeam --> ActivityLog')
  content.push('  ActivityLog --> Success')
  content.push('```')
  content.push('')
  
  // Sequence Diagram
  content.push('## Sequence Diagram')
  content.push('```mermaid')
  content.push('sequenceDiagram')
  content.push('  participant U as User')
  content.push('  participant UI as Create Form')
  content.push('  participant V as Validator')
  content.push('  participant API as API Route')
  content.push('  participant DAL as Data Layer')
  content.push('  participant DB as Appwrite')
  content.push('  ')
  content.push('  U->>UI: Open create league')
  content.push('  UI->>U: Show form')
  content.push('  ')
  content.push('  U->>UI: Fill settings')
  content.push('  Note over UI: Name, Mode, Conference,<br/>Draft type, Teams,<br/>Privacy, Password')
  content.push('  ')
  content.push('  U->>UI: Submit form')
  content.push('  UI->>V: Validate with Zod')
  content.push('  ')
  content.push('  alt Invalid Data')
  content.push('    V-->>UI: Validation errors')
  content.push('    UI-->>U: Show errors')
  content.push('  else Valid Data')
  content.push('    V-->>UI: Valid')
  content.push('    UI->>API: POST /api/leagues/create')
  content.push('  end')
  content.push('  ')
  content.push('  API->>DAL: Create league')
  content.push('  DAL->>DB: INSERT leagues')
  content.push('  DB-->>DAL: League ID')
  content.push('  ')
  content.push('  DAL->>DB: INSERT league_memberships')
  content.push('  Note over DB: Commissioner role')
  content.push('  ')
  content.push('  DAL->>DB: INSERT fantasy_teams')
  content.push('  Note over DB: Commissioner team')
  content.push('  ')
  content.push('  DAL->>DB: INSERT activity_log')
  content.push('  ')
  content.push('  DAL-->>API: League created')
  content.push('  API-->>UI: Success + League ID')
  content.push('  UI-->>U: Redirect to league')
  content.push('```')
  content.push('')
  
  // Data Interaction Table
  content.push('## Data Interactions')
  content.push('')
  content.push('| Collection | Operation | Attributes Set | Notes |')
  content.push('|------------|-----------|---------------|-------|')
  content.push('| `leagues` | CREATE | `name`, `game_mode`, `selected_conference`, `draft_type`, `max_teams`, `is_public`, `password`, `commissioner_id`, `status`, `created_at` | Main league record |')
  content.push('| `league_memberships` | CREATE | `league_id`, `client_id`, `role=commissioner`, `status=active`, `joined_at` | Add creator as commissioner |')
  content.push('| `fantasy_teams` | CREATE | `league_id`, `owner_client_id`, `name`, `created_at` | Create commissioner\'s team |')
  content.push('| `activity_log` | CREATE | `action=league_created`, `league_id`, `client_id`, `metadata` | Track creation event |')
  content.push('| `invites` | CREATE* | `league_id`, `invite_code`, `expires_at` | *If private league |')
  content.push('')
  
  // Validation Rules
  content.push('## Validation Rules')
  content.push('')
  content.push('### Required Fields')
  content.push('- League name (3-50 characters)')
  content.push('- Game mode (power4 or conference)')
  content.push('- If conference mode: selected conference (SEC/ACC/Big12/BigTen)')
  content.push('- Draft type (snake or auction)')
  content.push('- Max teams (8-12)')
  content.push('')
  content.push('### Business Rules')
  content.push('- User must be authenticated')
  content.push('- User can create max 5 leagues per season')
  content.push('- League name must be unique within season')
  content.push('- Private leagues require password (min 6 chars)')
  content.push('- Draft date must be future date')
  content.push('- Game mode and conference are immutable after creation')
  content.push('')
  
  // Error States
  content.push('## Error States')
  content.push('- `400` - Invalid input data')
  content.push('- `401` - User not authenticated')
  content.push('- `409` - League name already exists')
  content.push('- `429` - Too many leagues created')
  content.push('- `500` - Database error')
  content.push('')
  
  return content.join('\n')
}

// Ensure directory exists
fs.mkdirSync(OUTPUT_DIR, { recursive: true })

// Generate and write content
const content = generateCreateLeagueDiagrams()
fs.writeFileSync(OUTPUT_FILE, content)

console.log(`âœ… Generated: ${OUTPUT_FILE}`)
