/**
 * Appwrite Configuration Generator
 * 
 * Generates Appwrite collection creation scripts and configuration from the canonical schema
 */

import { SCHEMA, type SchemaCollection, type SchemaAttribute } from '../schema';
import { Client, Databases, Permission, Role } from 'node-appwrite';
import fs from 'fs';
import path from 'path';

export function generateAppwriteConfig(): string {
  let configCode = `/**
 * AUTO-GENERATED APPWRITE CONFIGURATION
 * 
 * Generated from schema/schema.ts
 * Do not edit this file directly - run 'npm run generate:appwrite' instead
 */

import { Client, Databases } from 'node-appwrite';

// Schema version for migration compatibility
export const SCHEMA_VERSION = '1.0.0';

// Initialize Appwrite client
export const client = new Client()
  .setEndpoint(process.env.APPWRITE_ENDPOINT || 'https://nyc.cloud.appwrite.io/v1')
  .setProject(process.env.APPWRITE_PROJECT_ID || 'college-football-fantasy-app')
  .setKey(process.env.APPWRITE_API_KEY);

export const databases = new Databases(client);
export const DATABASE_ID = process.env.APPWRITE_DATABASE_ID || 'college-football-fantasy';

// Collection IDs derived from schema
export const COLLECTIONS = {
`;

  // Generate collection constants
  for (const [collectionId] of Object.entries(SCHEMA)) {
    const constantName = collectionId.toUpperCase();
    configCode += `  ${constantName}: '${collectionId}',\n`;
  }

  configCode += `} as const;\n\n`;

  // Generate collection metadata
  configCode += `// Collection metadata for validation and tooling\nexport const COLLECTION_METADATA = {\n`;
  
  for (const [collectionId, collection] of Object.entries(SCHEMA)) {
    configCode += `  ${collectionId}: {\n`;
    configCode += `    id: '${collection.id}',\n`;
    configCode += `    name: '${collection.name}',\n`;
    configCode += `    description: '${collection.description}',\n`;
    configCode += `    attributeCount: ${collection.attributes.length},\n`;
    configCode += `    indexCount: ${collection.indexes.length},\n`;
    configCode += `    requiredAttributes: [${collection.attributes.filter(a => a.required).map(a => `'${a.key}'`).join(', ')}],\n`;
    configCode += `  },\n`;
  }
  
  configCode += `};\n\n`;

  // Generate helper functions
  configCode += `/**
 * Get collection ID with type safety
 */
export function getCollectionId(name: keyof typeof COLLECTIONS): string {
  return COLLECTIONS[name];
}

/**
 * Validate that all required collections exist
 */
export async function validateCollections(): Promise<{ valid: boolean; missing: string[] }> {
  try {
    const response = await databases.listCollections(DATABASE_ID);
    const existingIds = new Set(response.collections.map(c => c.$id));
    
    const requiredCollections = Object.values(COLLECTIONS);
    const missing = requiredCollections.filter(id => !existingIds.has(id));
    
    return { valid: missing.length === 0, missing };
  } catch (error) {
    console.error('Failed to validate collections:', error);
    return { valid: false, missing: Object.values(COLLECTIONS) };
  }
}

/**
 * Get collection metadata
 */
export function getCollectionMetadata(collectionId: string) {
  return COLLECTION_METADATA[collectionId as keyof typeof COLLECTION_METADATA];
}
`;

  return configCode;
}

export function generateAppwriteSeeder(): string {
  let seederCode = `/**
 * AUTO-GENERATED APPWRITE SEEDER
 * 
 * Creates all collections, attributes, and indexes from the canonical schema
 * Generated from schema/schema.ts
 */

import { Client, Databases, Permission, Role } from 'node-appwrite';
import { SCHEMA } from '../schema';

const client = new Client()
  .setEndpoint(process.env.APPWRITE_ENDPOINT || 'https://nyc.cloud.appwrite.io/v1')
  .setProject(process.env.APPWRITE_PROJECT_ID || 'college-football-fantasy-app')
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.APPWRITE_DATABASE_ID || 'college-football-fantasy';

// Colors for console output
const colors = {
  reset: '\\x1b[0m',
  green: '\\x1b[32m',
  yellow: '\\x1b[33m',
  red: '\\x1b[31m',
  cyan: '\\x1b[36m'
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(\`\${colors[color]}\${message}\${colors.reset}\`);
}

async function createAttribute(collectionId: string, attr: any): Promise<void> {
  const { key, type, size, required = false, array = false } = attr;
  
  try {
    switch (type) {
      case 'string':
      case 'url':
      case 'email':
      case 'ip':
        await databases.createStringAttribute(
          DATABASE_ID,
          collectionId,
          key,
          size || 255,
          required,
          attr.default,
          array
        );
        break;
      case 'integer':
        await databases.createIntegerAttribute(
          DATABASE_ID,
          collectionId,
          key,
          required,
          undefined, // min
          undefined, // max
          attr.default,
          array
        );
        break;
      case 'double':
        await databases.createFloatAttribute(
          DATABASE_ID,
          collectionId,
          key,
          required,
          undefined, // min
          undefined, // max
          attr.default,
          array
        );
        break;
      case 'boolean':
        await databases.createBooleanAttribute(
          DATABASE_ID,
          collectionId,
          key,
          required,
          attr.default,
          array
        );
        break;
      case 'datetime':
        await databases.createDatetimeAttribute(
          DATABASE_ID,
          collectionId,
          key,
          required,
          attr.default,
          array
        );
        break;
      default:
        throw new Error(\`Unsupported attribute type: \${type}\`);
    }
    
    log(\`    ‚úÖ Created attribute: \${key} (\${type})\`, 'green');
  } catch (error: any) {
    if (error.message?.includes('already exists')) {
      log(\`    ‚úÖ Attribute already exists: \${key}\`, 'yellow');
    } else {
      log(\`    ‚ùå Failed to create \${key}: \${error.message}\`, 'red');
      throw error;
    }
  }
}

async function createIndex(collectionId: string, index: any): Promise<void> {
  const { key, type, attributes, orders } = index;
  
  try {
    await databases.createIndex(
      DATABASE_ID,
      collectionId,
      key,
      type,
      attributes,
      orders
    );
    
    log(\`    ‚úÖ Created index: \${key} on [\${attributes.join(', ')}]\`, 'green');
  } catch (error: any) {
    if (error.message?.includes('already exists')) {
      log(\`    ‚úÖ Index already exists: \${key}\`, 'yellow');
    } else {
      log(\`    ‚ùå Failed to create \${key}: \${error.message}\`, 'red');
      throw error;
    }
  }
}

function convertPermissions(permissions: any): string[] {
  const perms: string[] = [];
  
  // Convert schema permissions to Appwrite Permission objects
  for (const [action, roles] of Object.entries(permissions)) {
    for (const role of roles as string[]) {
      if (role === 'any') {
        perms.push(Permission[action as keyof typeof Permission](Role.any()));
      } else if (role.startsWith('role:')) {
        const roleName = role.substring(5);
        perms.push(Permission[action as keyof typeof Permission](Role.team(roleName)));
      } else {
        perms.push(Permission[action as keyof typeof Permission](Role.user(role)));
      }
    }
  }
  
  return perms;
}

export async function seedAppwriteSchema(): Promise<void> {
  log('\\nüöÄ Starting Appwrite Schema Seeder', 'cyan');
  log('==================================', 'cyan');
  
  let collectionsCreated = 0;
  let attributesCreated = 0;
  let indexesCreated = 0;
  
  try {
    // Get existing collections
    const existingCollections = await databases.listCollections(DATABASE_ID);
    const existingIds = new Set(existingCollections.collections.map(c => c.$id));
    
    // Create collections in dependency order
    const collectionOrder = [
      'users', 'teams', 'college_players', 'games', 'rankings', 'player_stats',
      'leagues', 'user_teams', 'lineups', 'auctions', 'bids', 'activity_log'
    ];
    
    for (const collectionId of collectionOrder) {
      if (!SCHEMA[collectionId]) continue;
      
      const collection = SCHEMA[collectionId];
      log(\`\\nüìã Processing collection: \${collection.name}\`, 'cyan');
      
      // Create collection if it doesn't exist
      if (!existingIds.has(collectionId)) {
        try {
          const permissions = convertPermissions(collection.permissions);
          
          await databases.createCollection(
            DATABASE_ID,
            collectionId,
            collection.name,
            permissions
          );
          
          log(\`  ‚úÖ Created collection: \${collection.name}\`, 'green');
          collectionsCreated++;
        } catch (error: any) {
          log(\`  ‚ùå Failed to create collection: \${error.message}\`, 'red');
          continue;
        }
      } else {
        log(\`  ‚úÖ Collection already exists: \${collection.name}\`, 'yellow');
      }
      
      // Create attributes
      log(\`  üìù Creating \${collection.attributes.length} attributes...\`);
      for (const attr of collection.attributes) {
        await createAttribute(collectionId, attr);
        attributesCreated++;
      }
      
      // Wait a bit for attributes to be ready
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Create indexes
      log(\`  üìá Creating \${collection.indexes.length} indexes...\`);
      for (const index of collection.indexes) {
        await createIndex(collectionId, index);
        indexesCreated++;
      }
    }
    
    log(\`\\nüéâ Schema seeding completed successfully!\`, 'green');
    log(\`üìä Summary:\`, 'cyan');
    log(\`  - Collections: \${collectionsCreated} created\`);
    log(\`  - Attributes: \${attributesCreated} processed\`);
    log(\`  - Indexes: \${indexesCreated} processed\`);
    
  } catch (error) {
    log(\`\\n‚ùå Schema seeding failed: \${error}\`, 'red');
    throw error;
  }
}

// CLI support
if (require.main === module) {
  seedAppwriteSchema().catch(error => {
    console.error('Seeder failed:', error);
    process.exit(1);
  });
}
`;

  return seederCode;
}

export function writeAppwriteFiles(): void {
  // Write config file
  const configContent = generateAppwriteConfig();
  const configPath = path.join(process.cwd(), 'lib', 'appwrite-generated.ts');
  fs.writeFileSync(configPath, configContent);
  console.log(`‚úÖ Generated Appwrite config: ${configPath}`);
  
  // Write seeder file
  const seederContent = generateAppwriteSeeder();
  const seederPath = path.join(process.cwd(), 'lib', 'appwrite-seeder.generated.ts');
  fs.writeFileSync(seederPath, seederContent);
  console.log(`‚úÖ Generated Appwrite seeder: ${seederPath}`);
}

// CLI support
if (require.main === module) {
  writeAppwriteFiles();
}