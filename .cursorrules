# College Football Fantasy App - AI Development Rules

## üöÄ AI Assistant Capabilities & Permissions
You are empowered to:
- **Create**: Build complete features, components, APIs, and tests
- **Modify**: Refactor, optimize, and improve any code
- **Debug**: Use all available tools to diagnose and fix issues
- **Deploy**: Run builds, tests, and deployment commands
- **Research**: Search codebase, documentation, and web for solutions
- **Design**: Create UI/UX improvements and architectural solutions
- **Document**: Update docs, add comments, create guides

## üéØ Project Overview
**Name**: College Football Fantasy App  
**URL**: https://cfbfantasy.app  
**Type**: Full-stack fantasy sports platform for Power 4 conferences  
**Unique**: Players only score vs AP Top-25 teams or in conference games  

## üõ†Ô∏è Tech Stack
- **Framework**: Next.js 15.4.5 (App Router), React 18, TypeScript 5.x
- **Styling**: Tailwind CSS v3, Framer Motion, shadcn/ui
- **Backend**: Appwrite BaaS (NYC), Edge Functions, Server Actions
- **Database**: Appwrite Collections (document-based)
- **3D Graphics**: Three.js, React Three Fiber, Spline
- **APIs**: College Football Data API (CFBD), ESPN API
- **AI**: Vercel AI SDK, Anthropic Claude, Chrome AI
- **Deployment**: Vercel (Edge Runtime + Node.js)
- **Monitoring**: Sentry, Vercel Analytics

## üìÅ Project Structure
```
/app                    # Next.js 15 App Router
  /(league)            # Public pages (login, signup, marketing)
  /(dashboard)         # Authenticated user pages
  /admin               # Admin tools (kashpm2002@gmail.com only)
  /api                 # API routes organized by feature
    /(backend)         # Server-side only routes
    /(frontend)        # Client-accessible routes
    /(external)        # Third-party integrations
/components            # React components
  /ui                  # shadcn/ui components
  /features            # Feature-specific components
  /layout              # Layout components
/lib                   # Core utilities
  /services            # Business logic
  /repositories        # Data access layer
  /hooks               # React hooks
/public                # Static assets
/ops                   # Operational scripts and tools
/schema                # Database schemas (SSOT)
/docs                  # Documentation
/tests                 # Test files
```

## üîë Environment Variables
```bash
# Appwrite (Required)
APPWRITE_ENDPOINT=https://nyc.cloud.appwrite.io/v1
APPWRITE_PROJECT_ID=college-football-fantasy-app
APPWRITE_DATABASE_ID=college-football-fantasy
APPWRITE_API_KEY=[server-only]

# Client-safe (NEXT_PUBLIC_)
NEXT_PUBLIC_APPWRITE_ENDPOINT=https://nyc.cloud.appwrite.io/v1
NEXT_PUBLIC_APPWRITE_PROJECT_ID=college-football-fantasy-app
NEXT_PUBLIC_APPWRITE_DATABASE_ID=college-football-fantasy

# Collections (all have NEXT_PUBLIC_APPWRITE_COLLECTION_ prefix)
NEXT_PUBLIC_APPWRITE_COLLECTION_PLAYERS=college_players
NEXT_PUBLIC_APPWRITE_COLLECTION_LEAGUES=leagues
NEXT_PUBLIC_APPWRITE_COLLECTION_DRAFTS=drafts
NEXT_PUBLIC_APPWRITE_COLLECTION_USER_TEAMS=user_teams

# External APIs
CFBD_API_KEY=[configured]
ESPN_USERNAME=kpm34@pitt.edu
ESPN_PASSWORD=#Kash2002

# AI & Tools
ANTHROPIC_API_KEY=[configured]
OPENAI_API_KEY=[optional]
GITHUB_TOKEN=[configured]
BRAVE_API_KEY=BSAQJHPdhjJ3hPcblDWtVJ8Z1qI6O2E
```

## üìä Database Schema (SSOT)
**Single Source of Truth**: `/schema/zod-schema.ts`

Key Collections:
- `leagues` - Fantasy leagues with settings
- `college_players` - Player data (NOT `players`)
- `user_teams` - Drafted teams (NOT `rosters`)
- `drafts` - Draft state and configuration
- `draft_picks` - Individual picks
- `games` - NCAA games schedule
- `rankings` - AP Top 25 weekly
- `player_stats` - Performance data
- `lineups` - Weekly lineups
- `activity_log` - User activity with inviteToken

Schema Rules:
- Required fields CANNOT have defaults in Appwrite
- Use optional fields with code defaults OR always provide values
- Run `npm run generate:all` after schema changes
- Sync with `npx tsx scripts/sync-appwrite-simple.ts`

## üé® Code Style & Patterns

### Component Pattern
```tsx
'use client'; // Only when needed

import { type FC } from 'react';

interface ComponentProps {
  // Always use TypeScript interfaces
}

export const Component: FC<ComponentProps> = ({ ...props }) => {
  // Prefer const over function declarations
  // Use early returns for conditionals
  // Extract complex logic to custom hooks
  return <div />;
};
```

### API Route Pattern
```ts
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

// Define schema
const requestSchema = z.object({
  // Validate all inputs
});

export async function POST(request: NextRequest) {
  try {
    // Parse and validate
    const body = await request.json();
    const data = requestSchema.parse(body);
    
    // Business logic
    
    return NextResponse.json({ success: true, data });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: error.errors }, { status: 400 });
    }
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}
```

### Data Fetching Pattern
```tsx
// Server Component (preferred)
async function ServerComponent() {
  const data = await fetchData(); // Direct DB call
  return <Client data={data} />;
}

// Client Hook (only when needed)
function useData() {
  return useSWR('/api/data', fetcher);
}
```

## üöÄ Development Commands
```bash
# Development
npm run dev              # Start dev server (port 3001)
npm run build            # Production build
npm run lint             # ESLint check
npm run typecheck        # TypeScript check
npm run format           # Prettier format

# Testing
npm test                 # Run tests
npm run test:e2e         # Playwright tests
npm run test:watch       # Watch mode

# Database
npm run generate:all     # Generate types from schema
npm run sync:schema      # Sync schema to Appwrite
npm run seed:data        # Seed test data

# Deployment
vercel                   # Deploy preview
vercel --prod           # Deploy production
vercel logs             # View logs
```

## üß™ Testing Requirements
- Unit tests for utilities and hooks
- Integration tests for API routes
- E2E tests for critical user flows (auth, draft, league)
- Test both authenticated and anonymous states
- Mobile responsiveness testing
- Performance testing (Core Web Vitals)

## üîç Debugging Workflow
1. **Browser**: Check console and network tab
2. **Server**: Check Vercel logs (`vercel logs`)
3. **Database**: Check Appwrite Console
4. **Types**: Run `npm run typecheck`
5. **Lint**: Run `npm run lint`
6. **Build**: Test with `npm run build`

## üêõ Common Issues & Solutions

### OAuth Authentication
- **Issue**: Redirect loop after Google login
- **Solution**: Use direct Appwrite URLs, check Vercel protection settings

### TypeScript Errors
- **Issue**: Type errors during build
- **Solution**: Run `npm run typecheck` locally first, use `SKIP_ENV_VALIDATION=true` if needed

### Database Errors
- **Issue**: Collection not found
- **Solution**: Use `college_players` not `players`, check env vars

### Port Conflicts
- **Issue**: Port 3001 in use
- **Solution**: `lsof -i :3001 && kill -9 [PID]`

## üéÆ Business Rules to Enforce
1. **Eligibility**: Players only score vs AP Top-25 or conference games
2. **Season**: 12-week regular season (no playoffs/bowls)
3. **Conferences**: Power 4 only (SEC, ACC, Big 12, Big Ten)
4. **Draft Types**: Snake (with timer) and Auction ($200 budget)
5. **Roster Limits**: Configurable by league commissioner
6. **Scoring**: Standard fantasy scoring with conference bonuses

## üìù Git Workflow
```bash
# Branch naming
feat/feature-name      # New features
fix/bug-description    # Bug fixes
chore/task-name       # Maintenance
docs/what-changed     # Documentation

# Commit format (Conventional Commits)
feat: add user authentication
fix: resolve OAuth redirect loop
chore: update dependencies
docs: add API documentation
test: add league creation tests
perf: optimize draft queries

# Pre-commit checklist
- [ ] npm run lint
- [ ] npm run typecheck
- [ ] npm test (for changed code)
- [ ] npm run build (before deploy)
```

## üîå API Development Guidelines
1. **Validation**: Use Zod for all inputs
2. **Auth**: Check session via cookies/headers
3. **Errors**: Return proper HTTP status codes
4. **Logging**: Log errors with context
5. **Rate Limiting**: Apply to auth and draft endpoints
6. **Caching**: Use Vercel KV for frequently accessed data
7. **Documentation**: Update API docs for new endpoints

## üé® UI/UX Standards
1. **Responsive**: Mobile-first design
2. **Accessibility**: WCAG 2.1 AA compliance
3. **Performance**: < 3s page load, < 100ms interactions
4. **Animations**: Smooth, purposeful, respect prefers-reduced-motion
5. **Errors**: User-friendly messages with recovery actions
6. **Loading**: Skeleton screens and progress indicators
7. **Dark Mode**: System preference with manual override

## üöÄ Performance Guidelines
- Lazy load heavy components
- Optimize images with next/image
- Use React Server Components by default
- Implement virtual scrolling for long lists
- Bundle split by route automatically
- Minimize client-side JavaScript
- Cache API responses appropriately

## üîê Security Requirements
- Never expose API keys in client code
- Validate all user inputs
- Sanitize data before display
- Use HTTPS everywhere
- Implement CSRF protection
- Rate limit sensitive endpoints
- Log security events

## üìä Monitoring & Analytics
- Sentry for error tracking
- Vercel Analytics for performance
- Custom events for user actions
- Database query performance
- API response times
- Core Web Vitals tracking

## ü§ñ AI Development Tools

### VS Code Extensions to Install
```bash
# Install all recommended extensions
code --install-extension dbaeumer.vscode-eslint \
  --install-extension esbenp.prettier-vscode \
  --install-extension usernamehw.errorlens \
  --install-extension Gruntfuggly.todo-tree \
  --install-extension humao.rest-client \
  --install-extension aaron-bond.better-comments \
  --install-extension eamodio.gitlens \
  --install-extension bradlc.vscode-tailwindcss \
  --install-extension Prisma.prisma \
  --install-extension ms-playwright.playwright \
  --install-extension yzhang.markdown-all-in-one
```

### Extension Usage Guide

**Error Lens** (`usernamehw.errorlens`)
- Shows errors/warnings inline in code
- Helps catch issues immediately
- Configure highlight colors in settings

**TODO Tree** (`Gruntfuggly.todo-tree`)
- Find all TODOs, FIXMEs, HACKs in codebase
- Custom tags: BUG, OPTIMIZE, REFACTOR
- Great for tracking technical debt

**REST Client** (`humao.rest-client`)
- Test APIs directly in VS Code
- Create `.http` files with requests
- Example: `/docs/api/test-auth.http`

**Better Comments** (`aaron-bond.better-comments`)
- Highlight important comments
- ! Red for warnings
- ? Blue for questions
- // Gray for deprecated
- * Green for highlights
- TODO Orange for todos

### MCP Server Configuration
Add to `~/.cursor/mcp.json`:
```json
{
  "mcpServers": {
    "appwrite": {
      "command": "uvx",
      "args": ["mcp-server-appwrite", "--users"],
      "env": {
        "APPWRITE_ENDPOINT": "https://nyc.cloud.appwrite.io/v1",
        "APPWRITE_PROJECT_ID": "college-football-fantasy-app",
        "APPWRITE_DATABASE_ID": "college-football-fantasy"
      }
    },
    "github": {
      "command": "npx",
      "args": ["mcp-server-github"],
      "env": {
        "GITHUB_TOKEN": "from_env"
      }
    },
    "brave-search": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_API_KEY": "BSAQJHPdhjJ3hPcblDWtVJ8Z1qI6O2E"
      }
    }
  }
}
```

## üìã Task Execution Framework

### When asked to implement a feature:
1. **Understand**: Restate the requirements
2. **Plan**: List affected files and approach
3. **Implement**: Write code with proper patterns
4. **Test**: Add/update tests
5. **Document**: Update relevant docs
6. **Verify**: Run checks and manual test

### When debugging an issue:
1. **Reproduce**: Get exact steps
2. **Investigate**: Use all available tools
3. **Diagnose**: Identify root cause
4. **Fix**: Implement solution
5. **Prevent**: Add tests to prevent regression
6. **Document**: Note in troubleshooting guide

### When optimizing performance:
1. **Measure**: Get baseline metrics
2. **Profile**: Identify bottlenecks
3. **Optimize**: Apply targeted fixes
4. **Verify**: Confirm improvements
5. **Monitor**: Set up ongoing tracking

## üö´ Never Do This
- Expose API keys in client code
- Use `any` type without justification
- Ignore TypeScript errors
- Skip error handling
- Hardcode environment-specific values
- Commit directly to main branch
- Deploy without testing
- Use synchronous operations in API routes
- Manipulate DOM directly in React
- Import server code in client components

## ‚úÖ Always Do This
- Validate all inputs with Zod
- Handle loading and error states
- Use semantic HTML elements
- Add proper TypeScript types
- Test on mobile devices
- Check accessibility
- Optimize for performance
- Document complex logic
- Follow existing patterns
- Clean up resources (timeouts, subscriptions)

## üéØ Current Priorities
1. Fix OAuth authentication flow
2. Complete draft system (timer, auto-pick)
3. Implement real-time scoring
4. Add league commissioner tools
5. Optimize 3D performance
6. Setup email notifications
7. Add social features
8. Improve mobile experience

## üìö Resources
- [Project Docs](/docs)
- [API Documentation](/docs/api)
- [Vercel Dashboard](https://vercel.com/kpm34s-projects)
- [Appwrite Console](https://nyc.cloud.appwrite.io)
- [CFBD API](https://collegefootballdata.com)
- [Next.js 15 Docs](https://nextjs.org/docs)

---
**Remember**: You have full autonomy to create, modify, and improve any aspect of this application. Be confident, thorough, and always prioritize user experience and code quality.