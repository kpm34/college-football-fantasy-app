# College Football Fantasy App - Cursor AI Assistant Rules

## üéØ Project Context
Fantasy football platform for Power 4 conferences (SEC, ACC, Big 12, Big Ten) with unique eligibility rules where players only score against AP Top-25 teams or in conference games.

## üõ†Ô∏è Tech Stack
- **Frontend**: Next.js 15.4.5, TypeScript, Tailwind CSS, Spline 3D
- **Backend**: Appwrite BaaS (NYC region)
- **Database**: Appwrite Collections
- **APIs**: College Football Data API (CFBD), ESPN API
- **Deployment**: Vercel Edge Functions
- **3D**: Three.js, React Three Fiber, Spline

## üìÅ Project Structure
```
/
‚îú‚îÄ‚îÄ app/                    # Next.js 15 App Router
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes
‚îÇ   ‚îú‚îÄ‚îÄ league/            # League pages
‚îÇ   ‚îú‚îÄ‚îÄ draft/             # Draft interfaces
‚îÇ   ‚îî‚îÄ‚îÄ auction/           # Auction draft
‚îú‚îÄ‚îÄ components/            # React components
‚îú‚îÄ‚îÄ lib/                   # Utilities
‚îú‚îÄ‚îÄ types/                 # TypeScript types
‚îú‚îÄ‚îÄ scripts/               # Data sync scripts
‚îî‚îÄ‚îÄ vendor/awwwards-rig/   # 3D submodule
```

## üöÄ Essential Commands

### Development
```bash
npm run dev                 # Start Next.js (port 3001)
npm run build              # Production build
npm run start              # Production server
npm run lint               # ESLint checks
npm run typecheck          # TypeScript checking
```

### Data Management
```bash
npm run sync-data          # Sync from APIs to Appwrite
npm test                   # Run API tests
node scripts/setup-appwrite-indexes.ts  # Setup DB indexes
```

### Deployment
```bash
vercel                     # Deploy preview
vercel --prod             # Deploy production
vercel pull               # Pull env variables
vercel logs               # View logs
```

## üîë Environment Variables
```bash
# Appwrite
NEXT_PUBLIC_APPWRITE_ENDPOINT=https://nyc.cloud.appwrite.io/v1
NEXT_PUBLIC_APPWRITE_PROJECT_ID=college-football-fantasy-app
NEXT_PUBLIC_APPWRITE_DATABASE_ID=college-football-fantasy
APPWRITE_API_KEY=[server-side only]

# APIs
CFBD_API_KEY=[configured]
AI_GATEWAY_API_KEY=[configured]
ANTHROPIC_API_KEY=[configured]

# AI Development Tools (Optional)
OPENAI_API_KEY=[set as needed]
RUNWAY_API_KEY=[set as needed]
MESHY_API_KEY=[set as needed]
FIGMA_ACCESS_TOKEN=[set as needed]
CRON_SECRET=[required for job polling]

# Collections (all prefixed with NEXT_PUBLIC_APPWRITE_COLLECTION_)
- PLAYERS=college_players
- LEAGUES=leagues
- ROSTERS=rosters
- GAMES=games
- RANKINGS=rankings
- AUCTIONS=auctions
- BIDS=bids
```

## üìù AI Assistant Instructions

### When Writing Code:
1. **Always use TypeScript** with strict mode
2. **Follow Next.js 15 App Router** patterns
3. **Use Tailwind CSS** for styling (no inline styles)
4. **Implement proper error boundaries** for all components
5. **Use React Server Components** where possible
6. **Validate all API responses** with Zod or TypeScript
7. **Never expose API keys** in client code

### Component Patterns:
```typescript
// Use this pattern for components
'use client' // Only when needed

import { type FC } from 'react'

interface ComponentProps {
  // Always define props interface
}

export const Component: FC<ComponentProps> = ({ }) => {
  // Implementation
}
```

### API Route Pattern:
```typescript
// app/api/[route]/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    // Implementation
    return NextResponse.json({ data })
  } catch (error) {
    return NextResponse.json({ error }, { status: 500 })
  }
}
```

### Appwrite Query Pattern:
```typescript
import { Query } from 'appwrite'
import { databases } from '@/lib/appwrite'

const response = await databases.listDocuments(
  process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID!,
  process.env.NEXT_PUBLIC_APPWRITE_COLLECTION_PLAYERS!,
  [
    Query.equal('conference', 'SEC'),
    Query.orderDesc('$createdAt'),
    Query.limit(100)
  ]
)
```

## üéÆ Fantasy Rules to Enforce
1. **Players only eligible** vs AP Top-25 or conference games
2. **12-week regular season** (no playoffs/bowls)
3. **Power 4 conferences only** (SEC, ACC, Big 12, Big Ten)
4. **Snake draft** with timer and auto-pick
5. **Auction draft** with $200 budget

## üêõ Common Issues & Fixes
```bash
# Port conflict
lsof -i :3001 && kill -9 [PID]

# Clear cache
rm -rf .next

# Reset dependencies
rm -rf node_modules package-lock.json
npm install

# Type errors during build
SKIP_ENV_VALIDATION=true npm run build
```

## üé® UI/UX Guidelines
1. **Mobile-first responsive design**
2. **Dark mode by default** with light mode option
3. **Smooth animations** with Framer Motion
4. **3D elements** sparingly for impact
5. **Loading states** for all async operations
6. **Error messages** that are helpful, not technical

## üìä Database Collections
- `leagues` - Fantasy leagues
- `rosters` - Team rosters (was teams)
- `college_players` - Player database
- `player_stats` - Weekly stats
- `games` - Game schedule/scores
- `rankings` - AP Top 25
- `auctions` - Auction drafts
- `bids` - Auction bid history
- `lineups` - Weekly lineups

## üîç Quick Debugging
```bash
# Check TypeScript errors
npm run typecheck

# Verify Appwrite connection
curl https://nyc.cloud.appwrite.io/v1/health

# Test API endpoint
curl http://localhost:3001/api/games

# View Vercel function logs
vercel logs --follow
```

## üö´ Never Do This
- Don't commit .env files
- Don't use var, always const/let
- Don't use any type, be specific
- Don't ignore TypeScript errors
- Don't use synchronous file operations
- Don't hardcode API URLs or keys
- Don't use client-side data fetching for initial loads

## ‚úÖ Always Do This
- Validate user input
- Handle loading and error states
- Use environment variables
- Write semantic HTML
- Optimize images with next/image
- Use dynamic imports for heavy libraries
- Test on mobile devices
- Add proper SEO meta tags

## üéØ Current Priorities
1. Complete draft system (snake + auction)
2. Implement real-time scoring
3. Add league management features
4. Optimize 3D performance
5. Setup email notifications
6. Add social features (trash talk, etc.)

## üìö Useful Links
- [Vercel Dashboard](https://vercel.com/kpm34s-projects)
- [Appwrite Console](https://cloud.appwrite.io)
- [CFBD API Docs](https://collegefootballdata.com)
- [Next.js 15 Docs](https://nextjs.org/docs)

## üß≠ AI Session Bootstrap (Claude Code + Cursor)
- Always load these at session start so tools and capabilities are known:
  - `CLAUDE_TOOLBOX.md` ‚Äì Complete toolbox and dev environment reference
  - `CLAUDE.md` ‚Äì Project context and architecture
  - `tools/capabilities.json` ‚Äì Machine-readable capabilities (stack, env, APIs, MCP)
  - `docs/MCP_CONFIG.json` ‚Äì Comprehensive MCP server configuration
  - `TOOLING_SUMMARY.md` ‚Äì MCP/Appwrite tooling setup summary
- If MCP is not active, prompt the user to configure `~/.cursor/mcp.json` with Appwrite and Vercel servers (see sections below).

## üß∞ MCP & AI Tooling
- Configure MCP in `~/.cursor/mcp.json` so Cursor/Claude can operate our stack:
  - Appwrite server (users/projects) via `uvx mcp-server-appwrite --users`
  - Vercel CLI server (`VERCEL_TOKEN` required)
- Keep this file and `CLAUDE.md`, `DATA_FLOW.md`, `docs/API_ROUTES.md`, and `docs/PROJECT_MAP.md` in sync so every AI session knows the system model.

## üîå SDK vs API vs CLI vs MCP (Usage)
- SDK: Use server-side (Node runtime) for type-safe Appwrite operations inside API routes/repos. Avoid in Edge.
- API: Use raw HTTP `fetch` for Edge functions or minimal footprint; handle auth manually (Appwrite cookie header).
- CLI: Use for deploys, env pulls, logs, and automation in CI.
- MCP: Dev-time automation inside Cursor (schema tasks, ops, inspections), not for app runtime.

## üåê Domains & Deployment
- Primary prod alias: `cfbfantasy.app` (always point latest prod to this)
- Secondary: `collegefootballfantasy.app` (only as needed)
- Common commands:
  - `vercel pull --environment=production`
  - `vercel --prod --force` (cache-busting deploy)
  - `vercel alias set <deployment> cfbfantasy.app`

## üóÑÔ∏è Data Collections (Extended)
- `projections_yearly`, `projections_weekly`, `model_inputs`, `user_custom_projections`
- Ensure env has: `NEXT_PUBLIC_APPWRITE_COLLECTION_PLAYER_PROJECTIONS`, `NEXT_PUBLIC_APPWRITE_COLLECTION_PROJECTIONS_WEEKLY`, `NEXT_PUBLIC_APPWRITE_COLLECTION_PROJECTIONS_YEARLY`, `NEXT_PUBLIC_APPWRITE_COLLECTION_MODEL_INPUTS`, `NEXT_PUBLIC_APPWRITE_COLLECTION_USER_CUSTOM_PROJECTIONS`

## üîê Env & Runtime Notes
- Never expose server keys in client. Use API routes for server work.
- Edge vs Node:
  - Use Node runtime for Appwrite SDK usage
  - Use Edge/runtime `fetch` for light endpoints without SDK

## üîó Key API Routes (Core)
- `POST /api/leagues/create` ‚Üí Creates league; normalizes UI fields:
  - Maps `leagueName` ‚Üí `name`
  - Maps `gameMode` + `selectedConference` ‚Üí `'power4'|'sec'|'acc'|'big12'|'bigten'`
  - Coerces numbers; joins commissioner automatically
- `POST /api/leagues/join` ‚Üí Validates capacity, membership, and password/invite; creates roster; updates league count
- `GET /api/leagues/search` ‚Üí Returns `$id`, `id`, `teams`, `type`, `hasPassword` for UI compatibility; excludes full leagues unless `includeClosed=true`
- `GET /api/leagues/invite` ‚Üí Validates token and returns league, or generates invite links

## üîÅ Join & Invite Flow (Important)
- Join page expects league objects with `$id` and `type` (`private` when `password` present)
- Search API must return `$id` and `hasPassword` so UI opens password modal
- Invite links support `token` and optional `league` param; token-only resolves league via API

## üß™ Operational Checklists
- Bootstrap: `vercel pull` ‚Üí `npm run typecheck` ‚Üí `npm run lint` ‚Üí `curl /api/health`
- Cache clear: `vercel --prod --force`
- Appwrite verify: `curl https://nyc.cloud.appwrite.io/v1/health`

## üß± Architecture Notes
- Repository pattern with Vercel KV caching and Appwrite persistence
- Real-time: Appwrite Realtime + Functions; draft timer/auto-pick in background job
- Edge Functions for low-latency search; server functions for DB writes

## üéØ Product Priorities (Live)
1. Real-time draft (snake + auction) with timer and auto-pick
2. Live scoring via ESPN/CFBD + Appwrite Functions
3. League management UX polish (commissioner tools, invites)
4. Projections system and data inputs consolidation
5. Performance & 3D optimization
6. Email notifications and social features

---
**Remember**: This is a production app. Code quality, performance, and user experience are paramount. Always test thoroughly before deploying.