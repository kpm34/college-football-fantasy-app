# College Football Fantasy App - Cursor AI Assistant Rules

## ü§ñ AI Model Selection Strategy

### Primary Model Assignments:
- **Primary Coder**: Claude Opus 4.x / Sonnet 4 (day-to-day code edits & refactors)
- **Planner/Agent**: GPT-5 (Thinking/High) for tricky multi-tool chains  
- **Max Mode/Huge Context**: Claude Opus 4.1 for massive context requirements
- **Available (Not Default)**: Grok 4 (keep accessible but don't auto-select)

### Auto Model Selection Rules:
```
Code Generation/Edits ‚Üí Claude Opus 4.x / Sonnet 4
Code Refactoring ‚Üí Claude Opus 4.x / Sonnet 4  
Planning/Architecture ‚Üí GPT-5 (Thinking/High)
Multi-tool Workflows ‚Üí GPT-5 (Thinking/High)
Large Context Analysis ‚Üí Claude Opus 4.1
Complex Problem Solving ‚Üí GPT-5 (Thinking/High)
Daily Development ‚Üí Claude Opus 4.x / Sonnet 4
```

### Model Preferences by Task:
- **Default for coding**: Always start with Claude Opus 4.x/Sonnet 4
- **Switch to GPT-5**: When dealing with complex planning, multi-step workflows, or agent-style tasks
- **Escalate to Opus 4.1**: When context exceeds normal limits or need maximum reasoning
- **Grok 4**: Manual selection only, keep in toolkit but don't auto-suggest

### Trigger Keywords for Model Selection:
**Claude Opus 4.x/Sonnet 4 (Primary Coder):**
- "fix", "edit", "refactor", "update", "modify", "change"
- "implement", "create component", "add feature", "write function"
- "debug", "optimize", "clean up", "improve"

**GPT-5 Thinking/High (Planner/Agent):**
- "plan", "design", "architecture", "strategy", "approach"
- "multi-step", "workflow", "pipeline", "automation"
- "complex problem", "analyze system", "breakdown"
- "integrate multiple", "coordinate", "orchestrate"

**Claude Opus 4.1 (Max Mode/Huge Context):**
- "analyze entire codebase", "large refactor", "massive context"
- "understand whole project", "comprehensive review"
- "max context", "full analysis", "complete understanding"

## üéØ Project Context
Fantasy football platform for Power 4 conferences (SEC, ACC, Big 12, Big Ten) with unique eligibility rules where players only score against AP Top-25 teams or in conference games.

## üõ†Ô∏è Tech Stack
- **Frontend**: Next.js 15.4.5, TypeScript, Tailwind CSS, Spline 3D
- **Backend**: Appwrite BaaS (NYC region)
- **Database**: Appwrite Collections
- **APIs**: College Football Data API (CFBD), ESPN API
- **Deployment**: Vercel Edge Functions
- **3D**: Three.js, React Three Fiber, Spline

## üìÅ Project Structure
```
/
‚îú‚îÄ‚îÄ app/                    # Next.js 15 App Router
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes
‚îÇ   ‚îú‚îÄ‚îÄ league/            # League pages
‚îÇ   ‚îú‚îÄ‚îÄ draft/             # Draft interfaces
‚îÇ   ‚îî‚îÄ‚îÄ auction/           # Auction draft
‚îú‚îÄ‚îÄ components/            # React components
‚îú‚îÄ‚îÄ lib/                   # Utilities
‚îú‚îÄ‚îÄ types/                 # TypeScript types
‚îú‚îÄ‚îÄ scripts/               # Data sync scripts
‚îî‚îÄ‚îÄ vendor/awwwards-rig/   # 3D submodule
```

## üöÄ Essential Commands

### Development
```bash
npm run dev                 # Start Next.js (port 3001)
npm run build              # Production build
npm run start              # Production server
npm run lint               # ESLint checks
npm run typecheck          # TypeScript checking
```

### Data Management
```bash
npm run sync-data          # Sync from APIs to Appwrite
npm test                   # Run API tests
node scripts/setup-appwrite-indexes.ts  # Setup DB indexes
```

### Deployment
```bash
vercel                     # Deploy preview
vercel --prod             # Deploy production
vercel pull               # Pull env variables
vercel logs               # View logs
```

## üîë Environment Variables
```bash
# Appwrite
NEXT_PUBLIC_APPWRITE_ENDPOINT=https://nyc.cloud.appwrite.io/v1
NEXT_PUBLIC_APPWRITE_PROJECT_ID=college-football-fantasy-app
NEXT_PUBLIC_APPWRITE_DATABASE_ID=college-football-fantasy
APPWRITE_API_KEY=[server-side only]

# APIs
CFBD_API_KEY=[configured]
AI_GATEWAY_API_KEY=[configured]
ANTHROPIC_API_KEY=[configured]

# AI Development Tools (Optional)
OPENAI_API_KEY=[set as needed]
RUNWAY_API_KEY=[configured]
MESHY_API_KEY=[set as needed]
FIGMA_ACCESS_TOKEN=[set as needed]
CRON_SECRET=[required for job polling]

# Collections (all prefixed with NEXT_PUBLIC_APPWRITE_COLLECTION_)
- PLAYERS=college_players
- LEAGUES=leagues
- ROSTERS=rosters
- GAMES=games
- RANKINGS=rankings
- AUCTIONS=auctions
- BIDS=bids
```

## üìù AI Assistant Instructions

### When Writing Code:
1. **Always use TypeScript** with strict mode
2. **Follow Next.js 15 App Router** patterns
3. **Use Tailwind CSS** for styling (no inline styles)
4. **Implement proper error boundaries** for all components
5. **Use React Server Components** where possible
6. **Validate all API responses** with Zod or TypeScript
7. **Never expose API keys** in client code

### Component Patterns:
```typescript
// Use this pattern for components
'use client' // Only when needed

import { type FC } from 'react'

interface ComponentProps {
  // Always define props interface
}

export const Component: FC<ComponentProps> = ({ }) => {
  // Implementation
}
```

### API Route Pattern:
```typescript
// app/api/[route]/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    // Implementation
    return NextResponse.json({ data })
  } catch (error) {
    return NextResponse.json({ error }, { status: 500 })
  }
}
```

### Appwrite Query Pattern:
```typescript
import { Query } from 'appwrite'
import { databases } from '@/lib/appwrite'

const response = await databases.listDocuments(
  process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID!,
  process.env.NEXT_PUBLIC_APPWRITE_COLLECTION_PLAYERS!,
  [
    Query.equal('conference', 'SEC'),
    Query.orderDesc('$createdAt'),
    Query.limit(100)
  ]
)
```

## üéÆ Fantasy Rules to Enforce
1. **Players only eligible** vs AP Top-25 or conference games
2. **12-week regular season** (no playoffs/bowls)
3. **Power 4 conferences only** (SEC, ACC, Big 12, Big Ten)
4. **Snake draft** with timer and auto-pick
5. **Auction draft** with $200 budget

## üêõ Common Issues & Fixes
```bash
# Port conflict
lsof -i :3001 && kill -9 [PID]

# Clear cache
rm -rf .next

# Reset dependencies
rm -rf node_modules package-lock.json
npm install

# Type errors during build
SKIP_ENV_VALIDATION=true npm run build
```

## üé® UI/UX Guidelines
1. **Mobile-first responsive design**
2. **Dark mode by default** with light mode option
3. **Smooth animations** with Framer Motion
4. **3D elements** sparingly for impact
5. **Loading states** for all async operations
6. **Error messages** that are helpful, not technical

## üìä Database Collections & Schema Management

### Single Source of Truth (SSOT) File Locations
- **Schema Definition**: `schema/zod-schema.ts` - THE canonical source
- **SSOT Guards**: `scripts/guards/validate-ssot-integrity.ts`, `scripts/guards/detect-schema-drift.ts`
- **SSOT Scripts**: `scripts/validate-ssot-schema.ts`, `scripts/sync-appwrite-from-ssot.ts`, `scripts/test-ssot-workflow.ts`
- **SSOT Documentation**: `SINGLE_SOURCE_OF_TRUTH.md`, `SCHEMA-GUARDRAILS.md`, `SCHEMA-IMPLEMENTATION.md`
- **Auto-Generated Types**: `types/generated.ts` - Generated from SSOT
- **Collection Config**: `lib/appwrite-generated.ts` - Generated from SSOT
- **Environment Template**: `.env.template.generated` - Generated from SSOT

### Collections
- `leagues` - Fantasy leagues
- `rosters` - Team rosters (was teams)
- `college_players` - Player database
- `player_stats` - Weekly stats
- `games` - Game schedule/scores
- `rankings` - AP Top 25
- `auctions` - Auction drafts
- `bids` - Auction bid history
- `lineups` - Weekly lineups

### Schema Workflow
```bash
# 1. Edit the SSOT (ONLY place to make schema changes)
vim schema/zod-schema.ts

# 2. Generate everything automatically
npm run generate:all

# 3. Sync to Appwrite
npx tsx scripts/sync-appwrite-simple.ts

# 4. Deploy with confidence
vercel --prod
```

## üîç Quick Debugging
```bash
# Check TypeScript errors
npm run typecheck

# Verify Appwrite connection
curl https://nyc.cloud.appwrite.io/v1/health

# Test API endpoint
curl http://localhost:3001/api/games

# View Vercel function logs
vercel logs --follow
```

## üö´ Never Do This
- Don't commit .env files
- Don't use var, always const/let
- Don't use any type, be specific
- Don't ignore TypeScript errors
- Don't use synchronous file operations
- Don't hardcode API URLs or keys
- Don't use client-side data fetching for initial loads

## ‚úÖ Always Do This
- Validate user input
- Handle loading and error states
- Use environment variables
- Write semantic HTML
- Optimize images with next/image
- Use dynamic imports for heavy libraries
- Test on mobile devices
- Add proper SEO meta tags

## üéØ Current Priorities
1. Complete draft system (snake + auction)
2. Implement real-time scoring
3. Add league management features
4. Optimize 3D performance
5. Setup email notifications
6. Add social features (trash talk, etc.)

## üìö Useful Links
- [Vercel Dashboard](https://vercel.com/kpm34s-projects)
- [Appwrite Console](https://nyc.cloud.appwrite.io)
- [CFBD API Docs](https://collegefootballdata.com)
- [Next.js 15 Docs](https://nextjs.org/docs)

## üß≠ AI Session Bootstrap (Claude Code + Cursor)
- Always load these at session start so tools and capabilities are known:
  - `toolbox/TOOLBOX_CLAUDE.md` ‚Äì MCP integration guide for Claude Code
  - `toolbox/TOOLBOX_CURSOR.md` ‚Äì Development environment guide for Cursor AI
  - `toolbox/CURSOR_COMMANDS.md` ‚Äì Quick command reference
  - `CLAUDE.md` ‚Äì Project context and architecture (stays in root)
  - `schema/zod-schema.ts` ‚Äì Single Source of Truth for all schemas
  - `docs/MCP_CONFIG.json` ‚Äì Comprehensive MCP server configuration
- If MCP is not active, prompt the user to configure `~/.cursor/mcp.json` with Appwrite and Vercel servers (see sections below).

## üì£ Change Reporting Protocol (MANDATORY)
- Before making ANY change (code, schema, docs, CI), summarize the proposed change and its impact:
  - Scope: files and directories to be edited
  - Affected features/pages and API routes
  - Collections and attributes involved (from `schema/zod-schema.ts`)
  - Data migrations or backfills required (if any)
  - Env/Secrets/CI implications
- After edits: list exactly what changed and why; link to relevant sections in `PROJECT_MAP.md` and `docs/DATA_FLOW.md`.
- When schema-related: never add defaults to required attributes. Either make optional and default-in-code, or always supply value at write time.
- Keep SSOT synced: if behavior or shape changes, update `schema/zod-schema.ts`, `PROJECT_MAP.md`, and `docs/DATA_FLOW.md` in the same PR.

## üß∞ MCP & AI Tooling
- Configure MCP in `~/.cursor/mcp.json` so Cursor/Claude can operate our stack:
  - Appwrite server (users/projects) via `uvx mcp-server-appwrite --users`
  - Vercel CLI server (`VERCEL_TOKEN` required)
- Keep this file and `CLAUDE.md`, `DATA_FLOW.md`, `docs/API_ROUTES.md`, and `docs/PROJECT_MAP.md` in sync so every AI session knows the system model.

## Appwrite MCP (Cursor/Claude) ‚Äî Setup and Usage

### Quick setup
1. Install uv (if not already): see `https://docs.astral.sh/uv/` (uvx is included).
2. Create or update `~/.cursor/mcp.json` with an Appwrite server entry:
```json
{
  "mcpServers": {
    "appwrite": {
      "command": "uvx",
      "args": ["mcp-server-appwrite", "--users"],
      "env": {
        "APPWRITE_ENDPOINT": "https://nyc.cloud.appwrite.io/v1",
        "APPWRITE_PROJECT_ID": "college-football-fantasy-app",
        "APPWRITE_DATABASE_ID": "college-football-fantasy",
        "APPWRITE_API_KEY": "set-in-local-env"
      }
    }
  }
}
```
- Do not commit keys. Prefer setting `APPWRITE_API_KEY` as an OS env var and leave the value as `"set-in-local-env"` or omit the `env` block entirely to inherit from your shell.
- Reference example (no secrets) lives in `docs/MCP_CONFIG.json`.

### What you can ask the assistant to do (via Appwrite MCP)
- List users/sessions, create users, update names/emails, enable/disable MFA, issue JWTs.
- Rotate sessions or invalidate tokens for a user.
- Review user activity logs and memberships.
- Validate account targets (email/SMS/push) and manage messaging targets.

Examples:
- ‚ÄúList the last 10 users and show their email verification status.‚Äù
- ‚ÄúCreate a new test user with email X and temporary password Y, then issue a JWT.‚Äù
- ‚ÄúDisable MFA for user U, regenerate recovery codes, and fetch them.‚Äù
- ‚ÄúDelete all active sessions for user U.‚Äù

### Guardrails
- Never write secrets into the repo. Keep keys in your local `~/.cursor/mcp.json` or shell env.
- For data writes in production, the assistant will summarize the change before executing and prefer least-privilege actions.
- Use Node runtime + Appwrite SDK for app logic; Appwrite MCP is for dev-time admin ops only.

### Troubleshooting
- If the Appwrite server doesn‚Äôt appear in tools: re-open Cursor, then check `~/.cursor/mcp.json` formatting.
- Verify connectivity: `curl https://nyc.cloud.appwrite.io/v1/health`
- Rotate any leaked API key immediately in Appwrite Console and update your local MCP config.

## Appwrite Schema Rules
- Required attributes cannot have default values in Appwrite. If you need a default:
  - Make the attribute optional (required=false) and set the default in API code or via migrations; or
  - Keep it required=true and always supply the value at creation/update time.
- Avoid combining `required=true` with `default` in collection definitions; Appwrite will reject it during schema sync/creation.

## üîå SDK vs API vs CLI vs MCP (Usage)
- SDK: Use server-side (Node runtime) for type-safe Appwrite operations inside API routes/repos. Avoid in Edge.
- API: Use raw HTTP `fetch` for Edge functions or minimal footprint; handle auth manually (Appwrite cookie header).
- CLI: Use for deploys, env pulls, logs, and automation in CI.
- MCP: Dev-time automation inside Cursor (schema tasks, ops, inspections), not for app runtime.

## üåê Domains & Deployment
- Primary prod alias: `cfbfantasy.app` (always point latest prod to this)
- Secondary: `collegefootballfantasy.app` (only as needed)
- Common commands:
  - `vercel pull --environment=production`
  - `vercel --prod --force` (cache-busting deploy)
  - `vercel alias set <deployment> cfbfantasy.app`

## üóÑÔ∏è Data Collections (Extended)
- `projections_yearly`, `projections_weekly`, `model_inputs`, `user_custom_projections`
- Ensure env has: `NEXT_PUBLIC_APPWRITE_COLLECTION_PLAYER_PROJECTIONS`, `NEXT_PUBLIC_APPWRITE_COLLECTION_PROJECTIONS_WEEKLY`, `NEXT_PUBLIC_APPWRITE_COLLECTION_PROJECTIONS_YEARLY`, `NEXT_PUBLIC_APPWRITE_COLLECTION_MODEL_INPUTS`, `NEXT_PUBLIC_APPWRITE_COLLECTION_USER_CUSTOM_PROJECTIONS`

## üîê Env & Runtime Notes
- Never expose server keys in client. Use API routes for server work.
- Edge vs Node:
  - Use Node runtime for Appwrite SDK usage
  - Use Edge/runtime `fetch` for light endpoints without SDK

## üêô GitHub Access & Workflow Management
### GitHub CLI & Token Setup
```bash
# Set GitHub token for CLI access (add to shell profile)
export GH_TOKEN="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"

# Verify authentication
gh auth status

# Common workflow commands
gh run list --limit 5           # List recent workflow runs
gh run view <run-id>            # View workflow details  
gh run view <run-id> --log-failed # View failed step logs
gh workflow list                # List all workflows
gh workflow run <workflow-name> # Trigger manual workflow
```

### GitHub MCP Configuration
Add to `~/.cursor/mcp.json` for Claude/Cursor GitHub access:
```json
{
  "mcpServers": {
    "github": {
      "command": "npx",
      "args": ["mcp-server-github"],
      "env": {
        "GITHUB_TOKEN": "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"
      }
    },
    "appwrite": {
      "command": "uvx", 
      "args": ["mcp-server-appwrite", "--users"],
      "env": {
        "APPWRITE_ENDPOINT": "https://nyc.cloud.appwrite.io/v1",
        "APPWRITE_PROJECT_ID": "college-football-fantasy-app",
        "APPWRITE_DATABASE_ID": "college-football-fantasy",
        "APPWRITE_API_KEY": "set-in-local-env"
      }
    },
    "brave-search": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_API_KEY": "BSAQJHPdhjJ3hPcblDWtVJ8Z1qI6O2E"
      }
    }
  }
}
```

### AI Assistant GitHub Workflow Instructions
When assisting with GitHub issues:
1. **Always check workflow status first**: Use `gh run list` to see recent runs
2. **Get detailed error logs**: Use `gh run view <id> --log-failed` for failures  
3. **Reference current token**: Use token from `.env.local` file: `GITHUB_PERSONAL_ACCESS_TOKEN`
4. **Common workflow files**:
   - `.github/workflows/e2e-tests.yml` - End-to-end testing
   - `.github/workflows/schema-sync.yml` - Database schema sync
   - `.github/workflows/post-deploy-smoke.yml` - Smoke tests
   - `.github/workflows/projection-updater-SECURE.yml` - Data updates

### Web Search Capabilities (Brave API)
With Brave Search MCP server enabled, AI assistants can:
- **Real-time web search**: Current events, documentation, error solutions
- **API research**: Find API documentation and examples  
- **Technology lookup**: Latest framework versions, best practices
- **Troubleshooting**: Search for specific error messages and solutions
- **Industry updates**: College football news, fantasy sports trends

Usage examples:
- "Search for Next.js 15 App Router best practices"
- "Find the latest College Football API documentation"
- "Look up solutions for Appwrite authentication errors"

### Workflow Debugging Checklist
- ‚úÖ URLs updated to use `https://cfbfantasy.app` (not old Vercel URLs)
- ‚úÖ Collection names match current schema (`user_teams` not `rosters`)  
- ‚úÖ GitHub token has sufficient permissions
- ‚úÖ Environment secrets properly configured in GitHub
- ‚úÖ No hardcoded API keys or sensitive data in workflow files

## üîó Key API Routes (Core)
- `POST /api/leagues/create` ‚Üí Creates league; normalizes UI fields:
  - Maps `leagueName` ‚Üí `name`
  - Maps `gameMode` + `selectedConference` ‚Üí `'power4'|'sec'|'acc'|'big12'|'bigten'`
  - Coerces numbers; joins commissioner automatically
- `POST /api/leagues/join` ‚Üí Validates capacity, membership, and password/invite; creates roster; updates league count
- `GET /api/leagues/search` ‚Üí Returns `$id`, `id`, `teams`, `type`, `hasPassword` for UI compatibility; excludes full leagues unless `includeClosed=true`
- `GET /api/leagues/invite` ‚Üí Validates token and returns league, or generates invite links

## üîÅ Join & Invite Flow (Important)
- Join page expects league objects with `$id` and `type` (`private` when `password` present)
- Search API must return `$id` and `hasPassword` so UI opens password modal
- Invite links support `token` and optional `league` param; token-only resolves league via API

## üß™ Operational Checklists
- Bootstrap: `vercel pull` ‚Üí `npm run typecheck` ‚Üí `npm run lint` ‚Üí `curl /api/health`
- Cache clear: `vercel --prod --force`
- Appwrite verify: `curl https://nyc.cloud.appwrite.io/v1/health`

## üß± Architecture Notes
- Repository pattern with Vercel KV caching and Appwrite persistence
- Real-time: Appwrite Realtime + Functions; draft timer/auto-pick in background job
- Edge Functions for low-latency search; server functions for DB writes

## üéØ Product Priorities (Live)
1. Real-time draft (snake + auction) with timer and auto-pick
2. Live scoring via ESPN/CFBD + Appwrite Functions
3. League management UX polish (commissioner tools, invites)
4. Projections system and data inputs consolidation
5. Performance & 3D optimization
6. Email notifications and social features

---
**Remember**: This is a production app. Code quality, performance, and user experience are paramount. Always test thoroughly before deploying.