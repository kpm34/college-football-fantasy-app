/**
 * AUTO-GENERATED APPWRITE CONFIGURATION
 * 
 * Generated from schema/schema.ts
 * Do not edit this file directly - run 'npm run generate:appwrite' instead
 */

import { Client, Databases } from 'node-appwrite';

// Schema version for migration compatibility
export const SCHEMA_VERSION = '1.0.0';

// Initialize Appwrite client
export const client = new Client()
  .setEndpoint(process.env.APPWRITE_ENDPOINT || 'https://nyc.cloud.appwrite.io/v1')
  .setProject(process.env.APPWRITE_PROJECT_ID || 'college-football-fantasy-app')
  .setKey(process.env.APPWRITE_API_KEY);

export const databases = new Databases(client);
export const DATABASE_ID = process.env.APPWRITE_DATABASE_ID || 'college-football-fantasy';

// Collection IDs derived from schema
export const COLLECTIONS = {
  COLLEGE_PLAYERS: 'college_players',
  TEAMS: 'teams',
  GAMES: 'games',
  RANKINGS: 'rankings',
  USER_TEAMS: 'user_teams',
  LEAGUES: 'leagues',
  LINEUPS: 'lineups',
  MATCHUPS: 'matchups',
  DRAFTS: 'drafts',
  DRAFT_PICKS: 'draft_picks',
  AUCTIONS: 'auctions',
  BIDS: 'bids',
  PLAYER_STATS: 'player_stats',
  MODEL_INPUTS: 'model_inputs',
  USERS: 'users',
  ACTIVITY_LOG: 'activity_log',
  PLAYER_DEPTH_CHARTS: 'player_depth_charts',
  TEAM_CONTEXT: 'team_context',
  INGESTION_LOG: 'ingestion_log',
  MANUAL_OVERRIDES: 'manual_overrides',
  DATA_SOURCE_REGISTRY: 'data_source_registry',
} as const;

// Collection metadata for validation and tooling
export const COLLECTION_METADATA = {
  college_players: {
    id: 'college_players',
    name: 'College Players',
    description: 'Player roster data from Power 4 conferences',
    attributeCount: 20,
    indexCount: 5,
    requiredAttributes: ['name', 'position', 'team', 'conference'],
  },
  teams: {
    id: 'teams',
    name: 'Teams',
    description: 'Power 4 conference team information',
    attributeCount: 10,
    indexCount: 3,
    requiredAttributes: ['name', 'abbreviation', 'conference'],
  },
  games: {
    id: 'games',
    name: 'Games',
    description: 'College football game schedule and results',
    attributeCount: 14,
    indexCount: 6,
    requiredAttributes: ['week', 'season', 'season_type', 'home_team', 'away_team', 'start_date'],
  },
  rankings: {
    id: 'rankings',
    name: 'AP Rankings',
    description: 'AP Top 25 and other poll rankings',
    attributeCount: 7,
    indexCount: 5,
    requiredAttributes: ['week', 'season', 'poll_type', 'team', 'rank'],
  },
  user_teams: {
    id: 'user_teams',
    name: 'User Teams',
    description: 'Fantasy team rosters within leagues',
    attributeCount: 9,
    indexCount: 3,
    requiredAttributes: ['leagueId', 'userId', 'teamName', 'players'],
  },
  leagues: {
    id: 'leagues',
    name: 'Leagues',
    description: 'Fantasy football leagues',
    attributeCount: 14,
    indexCount: 4,
    requiredAttributes: ['name', 'commissioner', 'season', 'draftType', 'gameMode'],
  },
  lineups: {
    id: 'lineups',
    name: 'Lineups',
    description: 'Weekly fantasy lineups',
    attributeCount: 7,
    indexCount: 3,
    requiredAttributes: ['rosterId', 'week', 'season'],
  },
  matchups: {
    id: 'matchups',
    name: 'Matchups',
    description: 'Head-to-head weekly fantasy matchups',
    attributeCount: 10,
    indexCount: 4,
    requiredAttributes: ['leagueId', 'week', 'season', 'team1Id', 'team2Id'],
  },
  drafts: {
    id: 'drafts',
    name: 'drafts',
    description: 'Snake draft sessions',
    attributeCount: 8,
    indexCount: 2,
    requiredAttributes: ['leagueId', 'status'],
  },
  draft_picks: {
    id: 'draft_picks',
    name: 'draft_picks',
    description: 'Individual draft picks and selections',
    attributeCount: 8,
    indexCount: 4,
    requiredAttributes: ['leagueId', 'userId', 'playerId', 'round', 'pick', 'timestamp'],
  },
  auctions: {
    id: 'auctions',
    name: 'Auctions',
    description: 'Auction draft sessions',
    attributeCount: 8,
    indexCount: 2,
    requiredAttributes: ['leagueId'],
  },
  bids: {
    id: 'bids',
    name: 'Bids',
    description: 'Auction bid history',
    attributeCount: 6,
    indexCount: 4,
    requiredAttributes: ['auctionId', 'playerId', 'teamId', 'amount', 'timestamp'],
  },
  player_stats: {
    id: 'player_stats',
    name: 'Player Stats',
    description: 'Game-by-game player statistics',
    attributeCount: 8,
    indexCount: 4,
    requiredAttributes: ['playerId', 'gameId', 'week', 'season'],
  },
  model_inputs: {
    id: 'model_inputs',
    name: 'model_inputs',
    description: 'Projection model inputs including depth charts and team data',
    attributeCount: 14,
    indexCount: 3,
    requiredAttributes: ['season'],
  },
  users: {
    id: 'users',
    name: 'Users',
    description: 'Application users',
    attributeCount: 7,
    indexCount: 3,
    requiredAttributes: ['authId', 'email'],
  },
  activity_log: {
    id: 'activity_log',
    name: 'activity_log',
    description: 'System activity and audit trail',
    attributeCount: 7,
    indexCount: 4,
    requiredAttributes: ['action', 'timestamp'],
  },
  player_depth_charts: {
    id: 'player_depth_charts',
    name: 'Player Depth Charts',
    description: 'Weekly depth chart positions and starter probabilities',
    attributeCount: 31,
    indexCount: 6,
    requiredAttributes: ['player_id', 'team_id', 'position', 'season', 'week', 'depth_chart_rank', 'starter_prob', 'injury_status', 'injury_as_of', 'injury_source', 'as_of', 'source', 'confidence', 'created_at', 'updated_at'],
  },
  team_context: {
    id: 'team_context',
    name: 'Team Context',
    description: 'Weekly team pace, play-calling, and opponent strength data',
    attributeCount: 31,
    indexCount: 5,
    requiredAttributes: ['team_id', 'season', 'week', 'estimated_plays_per_game', 'run_rate', 'pass_rate', 'as_of', 'source', 'confidence', 'created_at', 'updated_at'],
  },
  ingestion_log: {
    id: 'ingestion_log',
    name: 'Ingestion Log',
    description: 'Data pipeline execution and change tracking',
    attributeCount: 24,
    indexCount: 5,
    requiredAttributes: ['run_id', 'season', 'week', 'adapter', 'source', 'status', 'started_at'],
  },
  manual_overrides: {
    id: 'manual_overrides',
    name: 'Manual Overrides',
    description: 'Admin manual overrides for data corrections',
    attributeCount: 19,
    indexCount: 6,
    requiredAttributes: ['player_id', 'season', 'week', 'field_name', 'override_value', 'admin_user_id', 'reason', 'effective_from', 'created_at'],
  },
  data_source_registry: {
    id: 'data_source_registry',
    name: 'Data Source Registry',
    description: 'External data source configuration and health monitoring',
    attributeCount: 26,
    indexCount: 5,
    requiredAttributes: ['source_id', 'source_name', 'source_type', 'adapter_class', 'created_at', 'updated_at', 'created_by'],
  },
};

/**
 * Get collection ID with type safety
 */
export function getCollectionId(name: keyof typeof COLLECTIONS): string {
  return COLLECTIONS[name];
}

/**
 * Validate that all required collections exist
 */
export async function validateCollections(): Promise<{ valid: boolean; missing: string[] }> {
  try {
    const response = await databases.listCollections(DATABASE_ID);
    const existingIds = new Set(response.collections.map(c => c.$id));
    
    const requiredCollections = Object.values(COLLECTIONS);
    const missing = requiredCollections.filter(id => !existingIds.has(id));
    
    return { valid: missing.length === 0, missing };
  } catch (error) {
    console.error('Failed to validate collections:', error);
    return { valid: false, missing: Object.values(COLLECTIONS) };
  }
}

/**
 * Get collection metadata
 */
export function getCollectionMetadata(collectionId: string) {
  return COLLECTION_METADATA[collectionId as keyof typeof COLLECTION_METADATA];
}
